factor(names(sort(pd, decreasing = T)))
# KENDALL TAU
tmp <- apply(bh_pred, 2, median)
names(tmp)
fr <- sapply(sort(as.character(unique(f$Boar))), function(i) sum(f$Success[f$Boar == i]) / nrow(f[f$Boar == i,]))
fr
fr <- fr[order(gsub('Boar ', '', names(fr)))]
fr
fr <- fr[order(as.numeric(gsub('Boar ', '', names(fr))))]
fr
tmp
tmp[order(as.numeric(gsub('Boar ', '', names(tmp))))]
tmp_tbl <- cbind(Model = tmp[order(as.numeric(gsub('Boar ', '', names(tmp))))],
FR = fr)
tmp_tbÃ±
tmp_tbl
tmp_tbl <- tmp_tbl[order(tmp_tbl[, 1], decreasing = T), ]
tmp_tbl
cortest <- cor.test(order(tmp_tbl[, 1], decreasing = T), order(tmp_tbl[, 2], decreasing = T), method = 'kendall')
cortest
sort(fr)
sort(fr, decreasing = T)
rownames(tmp_tbl) == names(sort(fr, decreasing = T))
tmp_tbl
names(tmp_tbl)
rownames(tmp_tbl)
rownames(tmp_tbl)[order(tmp_tbl[, 2], decreasing = T)]
rownames(tmp_tbl)[order(tmp_tbl[, 2], decreasing = T)] == rownames(tmp_tbl)
sum(rownames(tmp_tbl)[order(tmp_tbl[, 2], decreasing = T)] == rownames(tmp_tbl))
6/17
cor.test(rownames(tmp_tbl)[order(tmp_tbl[, 2], decreasing = T)], rownames(tmp_tbl))
cor.test(rownames(tmp_tbl)[order(tmp_tbl[, 2], decreasing = T)], rownames(tmp_tbl), method = 'kendall')
cor.test(factor(rownames(tmp_tbl)[order(tmp_tbl[, 2], decreasing = T)]), factor(rownames(tmp_tbl)), method = 'kendall')
cor.test(as.numeric(factor(rownames(tmp_tbl)[order(tmp_tbl[, 2], decreasing = T)])), as.numeric(factor(rownames(tmp_tbl))), method = 'kendall')
cor.test(as.numeric(gsub('Boar ','',rownames(tmp_tbl)[order(tmp_tbl[, 2], decreasing = T)])),
as.numeric(gsub('Boar ','',rownames(tmp_tbl), method = 'kendall')))
cor.test(as.numeric(gsub('Boar ','',rownames(tmp_tbl)[order(tmp_tbl[, 2], decreasing = T)])),
as.numeric(gsub('Boar ','',rownames(tmp_tbl))), method = 'kendall')
cortest <- cor.test(order(tmp_tbl[, 1], decreasing = T), order(tmp_tbl[, 2], decreasing = T))
cortest
rank(tmp_tbl[, 1])
rank(-tmp_tbl[, 1])
rank(-tmp_tbl[, 2])
cor.test(rank(-tmp_tbl[, 2]), rank(-tmp_tbl[, 1]), method = 'kendall')
cor.test(rank(-tmp_tbl[, 2]), rank(-tmp_tbl[, 1]), method = 'kendall', exact = F)
tmp <- apply(fit_pred, 2, median)
tmp_tbl <- cbind(Model = tmp[order(as.numeric(gsub('Boar ', '', names(tmp))))], FR = fr)
tmp_tbl <- tmp_tbl[order(tmp_tbl[, 1], decreasing = T), ]
cor.test(rank(-tmp_tbl[, 2]), rank(-tmp_tbl[, 1]), method = 'kendall', exact = F)
tmp <- apply(umap_pred, 2, median)
tmp_tbl <- cbind(Model = tmp[order(as.numeric(gsub('Boar ', '', names(tmp))))], FR = fr)
tmp_tbl <- tmp_tbl[order(tmp_tbl[, 1], decreasing = T), ]
cor.test(rank(-tmp_tbl[, 2]), rank(-tmp_tbl[, 1]), method = 'kendall', exact = F)
# KENDALL TAU
fr <- sapply(sort(as.character(unique(f$Boar))), function(i) sum(f$Success[f$Boar == i]) / nrow(f[f$Boar == i,]))
fr <- fr[order(as.numeric(gsub('Boar ', '', names(fr))))]
tmp <- apply(bh_pred, 2, median)
tmp <- apply(fit_pred, 2, median)
tmp <- apply(umap_pred, 2, median)
tmp_tbl <- cbind(Model = tmp[order(as.numeric(gsub('Boar ', '', names(tmp))))], FR = fr)
tmp_tbl <- tmp_tbl[order(tmp_tbl[, 1], decreasing = T), ]
tmp_ta
tmp_tbl
cor.test(rank(-tmp_tbl[, 2]), rank(-tmp_tbl[, 1]), method = 'kendall', exact = F)
cor.test(tmp_tbl[, 2], tmp_tbl[, 1], method = 'kendall', exact = F)
tmp <- apply(bh_pred, 2, median)
tmp_tbl <- cbind(Model = tmp[order(as.numeric(gsub('Boar ', '', names(tmp))))], FR = fr)
tmp_tbl <- tmp_tbl[order(tmp_tbl[, 1], decreasing = T), ]
cor.test(tmp_tbl[, 2], tmp_tbl[, 1], method = 'kendall', exact = F)
tmp <- apply(fit_pred, 2, median)
tmp_tbl <- cbind(Model = tmp[order(as.numeric(gsub('Boar ', '', names(tmp))))], FR = fr)
tmp_tbl <- tmp_tbl[order(tmp_tbl[, 1], decreasing = T), ]
cor.test(tmp_tbl[, 2], tmp_tbl[, 1], method = 'kendall', exact = F)
?rank
fr
tmp[order(as.numeric(gsub('Boar ', '', names(tmp))))]
tmp <- apply(bh_pred, 2, median)
tmp1 <- apply(fit_pred, 2, median)
tmp2 <- apply(umap_pred, 2, median)
tmp_tbl <- cbind(bh = tmp[order(as.numeric(gsub('Boar ', '', names(tmp))))],
fit = tmp1[order(as.numeric(gsub('Boar ', '', names(tmp2))))],
umap = tmp2[order(as.numeric(gsub('Boar ', '', names(tmp2))))])
cor.test(tmp_tbl[, 2], tmp_tbl[, 1], method = 'kendall', exact = F)
cor.test(tmp_tbl[, 3], tmp_tbl[, 1], method = 'kendall', exact = F)
tmp_tbl
cor.test(tmp_tbl[, 2], tmp_tbl[, 3], method = 'kendall', exact = F)
tmp1[order(as.numeric(gsub('Boar ', '', names(tmp2))))]
tmp2[order(as.numeric(gsub('Boar ', '', names(tmp2))))]
tmp_tbl <- cbind(bh = tmp[order(as.numeric(gsub('Boar ', '', names(tmp))))],
fit = tmp1[order(as.numeric(gsub('Boar ', '', names(tmp1))))],
umap = tmp2[order(as.numeric(gsub('Boar ', '', names(tmp2))))])
cor.test(tmp_tbl[, 2], tmp_tbl[, 1], method = 'kendall', exact = F)
cor.test(tmp_tbl[, 3], tmp_tbl[, 1], method = 'kendall', exact = F)
cor.test(tmp_tbl[, 2], tmp_tbl[, 3], method = 'kendall', exact = F)
save.image("C:/Users/POL/Desktop/PIGS_REVIEW/BH_FIT_UMAP_ws.RData")
load("C:/Users/POL/Downloads/sperm.RData")
table(sperm$Boar1)
table(sperm$Boar)
range(table(sperm$Boar))
range(table(na.omit(sperm$Boar)))
lol <- na.omit(sperm)
range(table(tot$Boar))
range(table(lol$Boar))
load("C:/Users/POL/Downloads/sperm.RData")
library(bigMap)
write.csv(sperm, file = 'C:/Users/POL/Desktop/sperm.csv', sep = ',', row.names = F)
write.csv2(sperm, file = 'C:/Users/POL/Desktop/sperm.csv', sep = ',', row.names = F)
write.table(sperm, file = 'C:/Users/POL/Desktop/sperm.csv', sep = ',', row.names = F)
a <- read.csv('C:/Users/POL/Desktop/sperm.csv')
View(a)
load("C:/Users/POL/Downloads/cap_motdata.RData")
write.table(cap_motdata, file = 'C:/Users/POL/Desktop/cap_motdata.csv', sep = ',', row.names = F)
unique(cap_motdata$Condition)
load("I:/DEFINITIU_PIGS_REVIEW/PRED_used_for_plot_BHTSNE.RData")
View(pred)
write.table(pred, file = 'C:/Users/POL/Desktop/BHTSNE_Prediction.csv', sep = ',', row.names = F)
load("I:/DEFINITIU_PIGS_REVIEW/PRED_used_for_plot_FITSNE_13.RData")
write.table(fit_pred, file = 'C:/Users/POL/Desktop/FITSNE_Prediction.csv', sep = ',', row.names = F)
load("I:/DEFINITIU_PIGS_REVIEW/umap_result.RData")
View(umap_result)
View(pred)
dim(pred)
dim(prediction)
dim(umap_result$prediction)
write.table(umap_result$prediction, file = 'C:/Users/POL/Desktop/UMAP_Prediction.csv', sep = ',', row.names = F)
# data without duplicates
df <- na.omit(sperm[!duplicated(sperm[, vars]), vars])
Xw <- bdm.data(df)[[1]][,]
colnames(Xw) <- vars
# variables to compute t-SNE with
vars <- c('VCL','VSL','ALH','BCF')
# data without duplicates
df <- na.omit(sperm[!duplicated(sperm[, vars]), vars])
Xw <- bigMap::bdm.data(df)[[1]][,]
write.table(Xw, file = 'C:/Users/POL/Desktop/Xw.csv', sep = ',', row.names = F)
sessionInfo()
rep(63931, 5) / c(0.01, 0.05, 0.1, 0.5, 1)
rep(63931, 5) * (100*c(0.01, 0.05, 0.1, 0.5, 1))
rep(63931, 5) * (0.01*c(0.01, 0.05, 0.1, 0.5, 1))
rep(63931, 5) * (0.1*c(0.01, 0.05, 0.1, 0.5, 1))
round(rep(63931, 5) * (0.1*c(0.01, 0.05, 0.1, 0.5, 1)))
load("I:/DEFINITIU_PIGS_REVIEW/bh_list.RData")
BHtSNE <- bh_list$tsne[[3]]
BHtSNE <- bh_list$tsne
bdm.ptsne.plot(BHtSNE)
# requires to compute pakde first (bdm.pakde(BHtSNE), ppx = 639)
bdm.pakde.plot(BHtSNE)
# requires pakde and wtt (bdm.wtt(BHtSNE))
bdm.wtt.plot(BHtSNE)
# explore how variables are distributed along the landscape
bdm.qMap(BHtSNE, data = df)
sessionInfo()
apply(pred, 2, median)
colnames(pred)
colnames(fit_pred)
colnames(umap_result$prediction)
umap_coef <- coef(umap_result$models$`Number of clusters = 14`)
View(umap_coef)
umap_coef <- coef(umap_result$models$`Number of clusters = 14`)[[1]]
umap_coef
colnames(umap_coef) <- gsub('k_', 'Cluster ', colnames(umap_coef))
umap_coef
write.table(umap_coef, file = 'C:/Users/POL/Desktop/umap_coefficients.csv', sep = ',', row.names = F)
load("I:/DEFINITIU_PIGS_REVIEW/fit_list.RData")
bh_coef <- coef(bh_list$models$bh639_11)[[1]]
colnames(bh_coef) <- gsub('k_', 'Cluster ', colnames(bh_coef))
write.table(bh_coef, file = 'C:/Users/POL/Desktop/barneshut_coefficients.csv', sep = ',', row.names = F)
fit_coef <- coef(bh_list$models$fit639_13)[[1]]
fit_coef <- coef(fit_list$models$fit639_13)[[1]]
colnames(fit_coef) <- gsub('k_', 'Cluster ', colnames(fit_coef))
write.table(fit_coef, file = 'C:/Users/POL/Desktop/fitsne_coefficients.csv', sep = ',', row.names = F)
colnames(umap_coef)
colnames(fit_coef)
colnames(bh_coef)
bh_coef
bh_coef[1, ]
fit_coef[1, ]
bh_coef[1, ]
bh_list$models$bh639_11
bh_coef <- as.matrix(bh_list$models$bh639_11)
dim(bh_coef)
colnames(bh_coef)
clns <- gsub('b[(Intercept) Boar:', '', colnames(bh_coef))
clns <- gsub("b[(Intercept) Boar:"'", '', colnames(bh_coef))
clns <- gsub("b[(Intercept) Boar:", '', colnames(bh_coef))
clns <- gsub("b[ Intercept) Boar:", '', colnames(bh_coef))
clns <- gsub("b[(Intercept)] Boar:", '', colnames(bh_coef))
clnms
clns
clns <- gsub("b", '', colnames(bh_coef))
clns <- gsub("[", '', colnames(bh_coef))
clns <- gsub("[]", '', colnames(bh_coef))
clns <- gsub("[][]", '', colnames(bh_coef))
clns
clns <- gsub("b(Intercept) Boar:", '', colnames(clns))
clns
clns <- gsub("[][]", '', colnames(bh_coef))
clns <- gsub("(Intercept) Boar:", '', colnames(clns))
clns <- gsub("[][]", '', colnames(bh_coef))
clns <- gsub("(Intercept)", '', colnames(clns))
clns <- gsub("[][]", '', colnames(bh_coef))
clns <- gsub("b(Intercept) Boar:", '', clns)
clns
clns <- gsub("b(Intercept)", '', clns)
clns
clns <- gsub("(Intercept)", '', clns)
clns
clns <- gsub("()()", '', clns)
clns
clns <- gsub("b()", '', clns)
clns
clns <- gsub("[()]", '', clns)
clns
clns <- gsub(" ", '', clns)
clns
clns <- gsub("Boar:", '', clns)
clns
clns <- gsub("k_", 'Cluster ', clns)
clns <- gsub("", 'Intercept', clns)
ls
clns
clns <- gsub("[][]", '', colnames(bh_coef))
clns <- gsub("b[(Intercept)] Boar:", '', clns)
clns
clns <- gsub("b[(]Intecept[)] Boar:", '', clns)
clns
clns <- gsub("[b][(]Intecept[)] Boar:", '', clns)
clns
clns <- gsub("[()]", '', clns)
clns
clns <- gsub("bIntercept Boar:", '', clns)
clns
clns <- gsub("Sow_cycle", 'Sow parity', clns)
clns <- gsub("k_", 'Cluster ', clns)
clns <- gsub("Static_prop", 'Non motile', clns)
clns[15:15+17]
clns[15:(15+17)]
clns[15:(15+16)]
rank(clns[15:(15+16)])
paste('Boar', rank(clns[15:(15+16)]))
clns[15:(15+16)] <- paste('Boar', rank(clns[15:(15+16)]))
clns
colnames(bh_coef) <- clns
dim(bh_coef)
write.table(bh_coef, file = 'C:/Users/POL/Desktop/bhtsne_coefficients.csv', sep = ',', row.names = F)
all(rownames(bh_coef) == 1:8000)
fit_coef <- as.matrix(fit_list$models$fit639_13)
colnames(fit_coef)
colnames(fit_coef) <- clns
colnames(fit_coef)
colnames(fit_coef) <- c(clns[1:3], colnames(fit_coef)[4:16], clns[15:(15+16)])
c(clns[1:3], colnames(fit_coef)[4:16], clns[15:(15+16)])
colnames(fit_coef) <- c(clns[1:3], colnames(fit_coef)[4:16], clns[15:(15+16)], clns[32])
colnames(fit_coef)
colnames(fit_coef) <- gsub('k_', 'Cluster ', colnames(fit_coef))
write.table(fit_coef, file = 'C:/Users/POL/Desktop/fitsne_coefficients.csv', sep = ',', row.names = F)
umap_coef <- as.matrix(umap_result$models$`Number of clusters = 14`)
c(clns[1:3], colnames(umap_coef)[4:16], clns[15:(15+16)])
c(clns[1:3], colnames(umap_coef)[4:17], clns[15:(15+16)])
c(clns[1:3], colnames(umap_coef)[4:18], clns[15:(15+16)])
c(clns[1:3], colnames(umap_coef)[4:17], clns[15:(15+16)])
colnames(umap_coef) <- c(clns[1:3], colnames(umap_coef)[4:17], clns[15:(15+16)], clns[32])
colnames(umap_coef)
mcmc_intervals(umap_coef)
bayesplot::mcmc_intervals(umap_coef)
write.table(umap_coef, file = 'C:/Users/POL/Desktop/umap_coefficients.csv', sep = ',', row.names = F)
sessionInfo
sessionInfo()
exp_condition <- c('')
source('G:/research/MoveAnts/code/config.R')
source('C:/Users/POL/Desktop/gants_current/code/dev/dev_functions.R')
hex <- hex90
colnames(hex) <- c('x', 'y')
h <- hex90[hex90$rotY > 980, ]
colnames(h) <- c('x', 'y')
source('G:/research/2022/AnTracks/src/generic.R')
source('G:/research/2022/AnTracks/src/coords.R')
rm(list = ls()[grepl('json', ls())], visual, colony, current_dir, exp_condition, exps, conditionL)
load('G:/research/2022/AnTracks/results/det_coords.RData')
vapply(rep(0.25, 4), function(x) x*log(x), numeric(1))
-sum(vapply(rep(0.25, 4), function(x) x*log(x), numeric(1)))
M <- coords2matrix(det[[1]])
m <- M[1:1000, ]
p0_1 <- sum(m[, 1] == -1)
p1_1 <- sum(m[, 1] == 1)
p0_2 <- sum(m[, 2] == -1)
p1_2 <- sum(m[, 2] == 1)
unique(m[, 2])
h0 <- -sum(vapply(c(p0_1 / 1000, p0_2/1000), function(x) log(x)* x, numeric(1)))
h1 <- -sum(vapply(c(p1_1 / 1000, p1_2/1000), function(x) log(x)* x, numeric(1)))
sum(m[, 1] == 1 & m[, 2] == 1)
sum(m[, 1] == 1 & m[, 2] == -1)
sum(m[, 1] == -11 & m[, 2] == 1)
sum(m[, 1] == -1 & m[, 2] == 1)
sum(m[, 1] == -1 & m[, 2] == -1)
H <- -sum(vapply(c(6/1000, 44/1000, 15, /1000, 935/1000), function(x) log(x)*x, numeric(1)))
H <- -sum(vapply(c(6/1000, 44/1000, 15/1000, 935/1000), function(x) log(x)*x, numeric(1)))
H - h0 - h1
h0 + h1 - H
combn(1:5, 2)
any(c(0,1, 2, 3) == 0)
mi_func <- function(X){
dims <- dim(X)
m <- dims[1]
n <- dims[2]
M <- matrix(0, nrow = n, ncol = n, dimnames = list(colnames(X), colnames(X)))
entropy <- function(x){x * log(x)}
# combinations <- combn(1:)
for(i in 1:(m-1)){
for(j in 2:m){
px <- c(sum(X[, i] == -1), sum(X[, i] == 1)) / m
py <- c(sum(X[, j] == -1), sum(X[, j] == 1)) /m
if(any(c(px, py) == 0)){
I <- 0
} else {
p <- c(
p0 = sum(X[, i] == -1 & X[, j] == -1) / m
p1 = sum(X[, i] == -1 & X[, j] == 1) / m
p2 = sum(X[, i] == 1 & X[, j] == -1) / m
p3 = sum(X[, i] == 1 & X[, j] == 1) / m
)
Hx <- -sum(vapply(px, entropy, numeric(1)))
Hy <- -sum(vapply(py, entropy, numeric(1)))
H <- -sum(vapply(p, entropy, numeric(1)))
I <- Hx + Hy - H
}
M[i, j] <- I
}
}
}
mi_func <- function(X){
dims <- dim(X)
m <- dims[1]
n <- dims[2]
M <- matrix(0, nrow = n, ncol = n, dimnames = list(colnames(X), colnames(X)))
entropy <- function(x){x * log(x)}
# combinations <- combn(1:)
for(i in 1:(m-1)){
for(j in 2:m){
px <- c(sum(X[, i] == -1), sum(X[, i] == 1)) / m
py <- c(sum(X[, j] == -1), sum(X[, j] == 1)) /m
if(any(c(px, py) == 0)){
I <- 0
} else {
p <- c(
p0 = sum(X[, i] == -1 & X[, j] == -1) / m,
p1 = sum(X[, i] == -1 & X[, j] == 1) / m,
p2 = sum(X[, i] == 1 & X[, j] == -1) / m,
p3 = sum(X[, i] == 1 & X[, j] == 1) / m
)
Hx <- -sum(vapply(px, entropy, numeric(1)))
Hy <- -sum(vapply(py, entropy, numeric(1)))
H <- -sum(vapply(p, entropy, numeric(1)))
I <- Hx + Hy - H
}
M[i, j] <- I
}
}
}
mi_func(m[, 1:2])
mi_func(m[, 1:3])
dim(m)
dim(m[, 1:3])
mi_func <- function(X){
dims <- dim(X)
m <- dims[1]
n <- dims[2]
M <- matrix(0, nrow = n, ncol = n, dimnames = list(colnames(X), colnames(X)))
entropy <- function(x){x * log(x)}
# combinations <- combn(1:)
for(i in 1:(n-1)){
for(j in 2:n){
px <- c(sum(X[, i] == -1), sum(X[, i] == 1)) / m
py <- c(sum(X[, j] == -1), sum(X[, j] == 1)) /m
if(any(c(px, py) == 0)){
I <- 0
} else {
p <- c(
p0 = sum(X[, i] == -1 & X[, j] == -1) / m,
p1 = sum(X[, i] == -1 & X[, j] == 1) / m,
p2 = sum(X[, i] == 1 & X[, j] == -1) / m,
p3 = sum(X[, i] == 1 & X[, j] == 1) / m
)
Hx <- -sum(vapply(px, entropy, numeric(1)))
Hy <- -sum(vapply(py, entropy, numeric(1)))
H <- -sum(vapply(p, entropy, numeric(1)))
I <- Hx + Hy - H
}
M[i, j] <- I
}
}
}
mi_func(m[, 1:3])
mi_func <- function(X){
dims <- dim(X)
m <- dims[1]
n <- dims[2]
M <- matrix(0, nrow = n, ncol = n, dimnames = list(colnames(X), colnames(X)))
entropy <- function(x){x * log(x)}
# combinations <- combn(1:)
for(i in 1:(n-1)){
for(j in 2:n){
px <- c(sum(X[, i] == -1), sum(X[, i] == 1)) / m
py <- c(sum(X[, j] == -1), sum(X[, j] == 1)) /m
if(any(c(px, py) == 0)){
I <- 0
} else {
p <- c(
p0 = sum(X[, i] == -1 & X[, j] == -1) / m,
p1 = sum(X[, i] == -1 & X[, j] == 1) / m,
p2 = sum(X[, i] == 1 & X[, j] == -1) / m,
p3 = sum(X[, i] == 1 & X[, j] == 1) / m
)
Hx <- -sum(vapply(px, entropy, numeric(1)))
Hy <- -sum(vapply(py, entropy, numeric(1)))
H <- -sum(vapply(p, entropy, numeric(1)))
I <- Hx + Hy - H
}
M[i, j] <- I
}
}
M
}
mi_func(m[, 1:3])
mi_func <- function(X){
dims <- dim(X)
m <- dims[1]
n <- dims[2]
M <- matrix(0, nrow = n, ncol = n, dimnames = list(colnames(X), colnames(X)))
entropy <- function(x){x * log(x)}
# combinations <- combn(1:)
for(i in 1:(n-1)){
for(j in 2:n){
px <- c(sum(X[, i] == -1), sum(X[, i] == 1)) / m
py <- c(sum(X[, j] == -1), sum(X[, j] == 1)) /m
if(any(c(px, py) == 0)){
I <- 0
} else {
p <- c(
p0 = sum(X[, i] == -1 & X[, j] == -1) / m,
p1 = sum(X[, i] == -1 & X[, j] == 1) / m,
p2 = sum(X[, i] == 1 & X[, j] == -1) / m,
p3 = sum(X[, i] == 1 & X[, j] == 1) / m
)
if(any(p == 0)){
I <- 0
} else {
Hx <- -sum(vapply(px, entropy, numeric(1)))
Hy <- -sum(vapply(py, entropy, numeric(1)))
H <- -sum(vapply(p, entropy, numeric(1)))
I <- Hx + Hy - H
}
}
M[i, j] <- I
}
}
M
}
mi_func(m[, 1:3])
I <- mi_func(m)
dim(I)
draw_hexagons(det[[1]], add = draw_hexagons(det[[1]], z = I), size = 1)
draw_hexagons(det[[1]], add = draw_hexagons(det[[1]], z = I))
z <- numeric(length(det[[1]]$segments$o))
s <- det[[1]]$segments[, c('o', 'd')]
n <- colnames(I)
for(i in n){
idx <- which(s$o == i)
sb <- s[idx, ]
tmp <- numeric(nrow(sb))
for(x in seq_len(nrow(sb))){
r <- I[n == sb$o[x], n == sb$d[x]]
if(length(r)){
tmp[x] <- r
}
}
if(length(idx) != length(tmp)){
print(i)
}
z[idx] <- tmp
}
draw_hexagons(det[[1]], add = draw_hexagons(det[[1]], z = z), size = 1)
draw_hexagons(det[[1]], z = z, add = draw_hexagons(det[[1]], size = 1))
draw_hexagons(det[[1]], z = z)
sum(z)
hist(z)
hist(z, breaks = 20)
hist(z, breaks = 200)
unique(z)
draw_hexagons(det[[1]], z = z, size = 10)
which(z > 0)
exp_condition <- c('')
source('G:/research/MoveAnts/code/config.R')
source('C:/Users/POL/Desktop/gants_current/code/dev/dev_functions.R')
hex <- hex90
colnames(hex) <- c('x', 'y')
h <- hex90[hex90$rotY > 980, ]
colnames(h) <- c('x', 'y')
source('G:/research/2022/AnTracks/src/generic.R')
source('G:/research/2022/AnTracks/src/coords.R')
rm(list = ls()[grepl('json', ls())], visual, colony, current_dir, dirL, exp_condition, exps, conditionL)
load('G:/research/2022/AnTracks/results/sto_coords.RData')
load('G:/research/2022/AnTracks/results/det_coords.RData')
md1 <- coords2matrix(det[[1]])
dim(md1)
prs <- combn(colnames(md1), 2)
dim(prs)
611*611
611*611/2
head(prs)
prs <- t(combn(colnames(md1), 2))
head(prs)
