mean(N[1:(det_phase[i, 1])])
}, numeric(1))
p2N <- vapply(seq_along(det), function(i){
mean(N[(det_phase[i, 1] + 1):det_phase[i, 2]])
}, numeric(1))
p3N <- vapply(seq_along(det), function(i){
mean(N[(det_phase[i, 2] + 1):length(N)])
}, numeric(1))
# plot
ggplot(data = data.frame(x = c(rep('p1', 10), rep('p2',10), rep('p3', 10)),
y = c(p1N, p2N, p3N),
z = rep(seq(0, 50, length.out = 10), 3)), aes(x, y))+
# geom_violin(trim = FALSE)+
geom_violin(draw_quantiles = 0.5, trim = FALSE)+
# geom_boxplot(width = 0.05)+
geom_dotplot(binaxis = 'y', stackdir = 'center', aes(x,y, fill = z))+
scale_fill_viridis()
## +++ I +++
p1I <- vapply(seq_along(det), function(i){
mean(I[1:(det_phase[i, 1])])
}, numeric(1))
p2I <- vapply(seq_along(det), function(i){
mean(I[(det_phase[i, 1] + 1):det_phase[i, 2]])
}, numeric(1))
p3I <- vapply(seq_along(det), function(i){
mean(I[(det_phase[i, 2] + 1):length(I)])
}, numeric(1))
# plot
ggplot(data = data.frame(x = c(rep('p1', 10), rep('p2',10), rep('p3', 10)),
y = c(p1I, p2I, p3I)), aes(x, y))+
geom_violin(trim = FALSE)+
geom_boxplot(width = 0.05)+
geom_dotplot(binaxis = 'y', stackdir = 'center')
avgN <- colMeans(mN)
avgI <- colMeans(mI)
df <- data.frame(x = 1:21600 /120, y = cumsum(avgI[1:21600])/ max(cumsum(avgI[1:21600])),
z = as.numeric(smooth(avgN[1:21600]), twiceit = T))
ggplot(data = df) +
geom_bracket(xmin = 0, xmax = mean(det_phase[, 1])/120,
y.position = 0.94, color = 'black',
label = 'Exploration', label.size = 5, size = 0.6, tip.length = 0.02) +
geom_bracket(xmin = mean(det_phase[, 1])/120, xmax = mean(det_phase[, 2])/120,
y.position = 1, color = 'black',
label = 'Food collection', label.size = 5, size = 0.6, tip.length = 0.02) +
geom_bracket(xmin = mean(det_phase[, 2])/120, xmax = 180,
y.position = 1.05, color = 'black',
label = 'Post-collection', label.size = 5, size = 0.6, tip.length = 0.02) +
geom_line(aes(x, z / max(z), color = 'N'), size = 1.2)+
geom_line(aes(x, y, color = 'IC'), size = 2)+
scale_y_continuous('Cumulated Interactions (IC)', limits = c(0, 30/max(avgN[1:21600])),
breaks = seq(0,30/max(avgN[1:21600]), length.out = 9),
labels = seq(0, 2000, 250),
sec.axis = sec_axis(~ .,
breaks = seq(0, 30/max(avgN[1:21600]), length.out = 7),
labels = seq(0, 30, 5), name = 'Population (N)'))+
scale_x_continuous('Time (min)', breaks = seq(0, 180, 20))+
scale_color_manual('', values = c('N' = viridis(1, begin= 0.25, end = 0.25),
'IC' = viridis(1, begin= 0.7, end = 0.7)))+
guides(color = guide_legend(override.aes = list(size = 3)))+
theme(axis.title.y = element_text(margin = margin(0, 10, 0, 0)),
axis.title.y.right =  element_text(margin = margin(0,0, 0, 10)))
sto_phase <- t(vapply(sto, function(i){
x <- food_detection(i)
c(min(x, na.rm = T), max(x, na.rm = T))
}, numeric(2)))
mN <- numeric(0)
mI <- numeric(0)
for(i in seq_along(sto)){
N <- sto[[i]]$N
I <- sto[[i]]$I
if(i > 1){
if(length(N) < ncol(mN)){
N <- c(N, numeric(ncol(mN) - length(N)))
I <- c(I, numeric(ncol(mI) - length(I)))
} else if (length(N) > ncol(mN)){
m <- matrix(0, nrow = nrow(mN), ncol = length(N) - ncol(mN))
mN <- cbind(mN, m)
mI <- cbind(mI, m)
} else {
F
}
}
mN <- rbind(mN, N)
mI <- rbind(mI, I)
}
## BOXPLOTS per phase
## +++ N +++
mN <- mN[-2, ]
mI <- mI[-2, ]
p1N <- vapply(seq_along(sto), function(i){
mean(N[1:(sto_phase[i, 1])])
}, numeric(1))
p2N <- vapply(seq_along(sto), function(i){
mean(N[(sto_phase[i, 1] + 1):sto_phase[i, 2]])
}, numeric(1))
p3N <- vapply(seq_along(sto), function(i){
mean(N[(sto_phase[i, 2] + 1):length(N)])
}, numeric(1))
# plot
ggplot(data = data.frame(x = c(rep('p1', 9), rep('p2',9), rep('p3', 9)),
y = c(p1N[-2], p2N[-2], p3N[-2]),
z = rep(seq(0, 40, length.out = 9), 3)), aes(x, y))+
# geom_violin(trim = FALSE)+
geom_violin(draw_quantiles = 0.5, trim = FALSE)+
# geom_boxplot(width = 0.05)+
geom_dotplot(binaxis = 'y', stackdir = 'center', aes(x,y, fill = z))+
scale_fill_viridis()
avgN <- colMeans(mN)
avgI <- colMeans(mI)
df <- data.frame(x = 1:21600 /120, y = cumsum(avgI[1:21600])/ max(cumsum(avgI[1:21600])),
z = as.numeric(smooth(avgN[1:21600]), twiceit = T))
ggplot(data = df) +
geom_bracket(xmin = 0, xmax = mean(sto_phase[, 1])/120,
y.position = 0.94, color = 'black',
label = 'Exploration', label.size = 5, size = 0.6, tip.length = 0.02) +
geom_bracket(xmin = mean(sto_phase[, 1])/120, xmax = mean(sto_phase[, 2])/120,
y.position = 1, color = 'black',
label = 'Food collection', label.size = 5, size = 0.6, tip.length = 0.02) +
geom_bracket(xmin = mean(sto_phase[, 2])/120, xmax = 180,
y.position = 1.05, color = 'black',
label = 'Post-collection', label.size = 5, size = 0.6, tip.length = 0.02) +
geom_line(aes(x, z / max(z), color = 'N'), size = 1.2)+
geom_line(aes(x, y, color = 'IC'), size = 2)+
scale_y_continuous('Cumulated Interactions (IC)', limits = c(0, 37/max(avgN[1:21600])),
breaks = seq(0,35/max(avgN[1:21600]), length.out = 9),
labels = seq(0, 1000, 125),
sec.axis = sec_axis(~ .,
breaks = seq(0, 35/max(avgN[1:21600]), length.out = 8),
labels = seq(0, 35, 5), name = 'Population (N)'))+
scale_x_continuous('Time (min)', breaks = seq(0, 180, 20))+
scale_color_manual('', values = c('N' = viridis(1, begin= 0.25, end = 0.25),
'IC' = viridis(1, begin= 0.7, end = 0.7)))+
guides(color = guide_legend(override.aes = list(size = 3)))+
theme(axis.title.y = element_text(margin = margin(0, 10, 0, 0)),
axis.title.y.right =  element_text(margin = margin(0,0, 0, 10)))
mean(I[1:(sto_phase[i, 1])])
## +++ I +++
p1I <- vapply(seq_along(sto), function(i){
mean(I[1:(sto_phase[i, 1])])
}, numeric(1))
p2I <- vapply(seq_along(sto), function(i){
mean(I[(sto_phase[i, 1] + 1):sto_phase[i, 2]])
}, numeric(1))
p3I <- vapply(seq_along(sto), function(i){
mean(I[(sto_phase[i, 2] + 1):length(N)])
}, numeric(1))
# plot
ggplot(data = data.frame(x = c(rep('p1', 9), rep('p2',9), rep('p3', 9)),
y = c(p1N, p2N, p3N),
z = rep(seq(0, 40, length.out = 9), 3)), aes(x, y))+
# geom_violin(trim = FALSE)+
geom_violin(draw_quantiles = 0.5, trim = FALSE)+
# geom_boxplot(width = 0.05)+
geom_dotplot(binaxis = 'y', stackdir = 'center', aes(x,y, fill = z))+
scale_fill_viridis()
# plot
ggplot(data = data.frame(x = c(rep('p1', 9), rep('p2',9), rep('p3', 9)),
y = c(p1I[-2], p2I[-2], p3I[-2]),
z = rep(seq(0, 40, length.out = 9), 3)), aes(x, y))+
# geom_violin(trim = FALSE)+
geom_violin(draw_quantiles = 0.5, trim = FALSE)+
# geom_boxplot(width = 0.05)+
geom_dotplot(binaxis = 'y', stackdir = 'center', aes(x,y, fill = z))+
scale_fill_viridis()
# plot
ggplot(data = data.frame(x = c(rep('p1', 9), rep('p2',9), rep('p3', 9)),
y = c(p1I[-2], p2I[-2], p3I[-2]),
z = rep(seq(0, 40, length.out = 9), 3)), aes(x, y))+
# geom_violin(trim = FALSE)+
# geom_violin(draw_quantiles = 0.5, trim = FALSE)+
geom_boxplot()+
geom_dotplot(binaxis = 'y', stackdir = 'center', aes(x,y, fill = z))+
scale_fill_viridis()
plot(sto[[1]]$I)
plot(sto[[2]]$I)
plot(sto[[3]]$I)
plot(sto[[4]]$I)
plot(sto[[5]]$I)
plot(sto[[6]]$I)
plot(sto[[7]]$I)
sto_phase
mean(I[1:(sto_phase[1, 1])])
mean(I[1:(sto_phase[2, 1])])
mean(I[(sto_phase[1, 1]+ 1):sto_phase[1, 2]])
mean(I)
p1N <- vapply(seq_along(sto), function(i){
N <- sto[[i]]$I
mean(N[1:(sto_phase[i, 1])])
}, numeric(1))
p2N <- vapply(seq_along(sto), function(i){
N <- sto[[i]]$N
mean(N[(sto_phase[i, 1] + 1):sto_phase[i, 2]])
}, numeric(1))
p3N <- vapply(seq_along(sto), function(i){
N <- sto[[i]]$N
mean(N[(sto_phase[i, 2] + 1):length(N)])
}, numeric(1))
# plot
ggplot(data = data.frame(x = c(rep('p1', 9), rep('p2',9), rep('p3', 9)),
y = c(p1N[-2], p2N[-2], p3N[-2]),
z = rep(seq(0, 40, length.out = 9), 3)), aes(x, y))+
# geom_violin(trim = FALSE)+
geom_violin(draw_quantiles = 0.5, trim = FALSE)+
# geom_boxplot(width = 0.05)+
geom_dotplot(binaxis = 'y', stackdir = 'center', aes(x,y, fill = z))+
scale_fill_viridis()
# plot
ggplot(data = data.frame(x = c(rep('p1', 9), rep('p2',9), rep('p3', 9)),
y = c(p1N[-2], p2N[-2], p3N[-2]),
z = rep(seq(0, 40, length.out = 9), 3)), aes(x, y))+
# geom_violin(trim = FALSE)+
# geom_violin(draw_quantiles = 0.5, trim = FALSE)+
geom_boxplot()+
geom_dotplot(binaxis = 'y', stackdir = 'center', aes(x,y, fill = z))+
scale_fill_viridis()
p1N
p1N <- numeric()
p2N <- numeric()
p3N <- numeric()
p1I <- numeric()
p2I <- numeric()
p3I <- numeric()
mN <- numeric()
mI <- numeric()
for(i in seq_along(det)){
N <- det[[i]]$N
I <- det[[i]]$I
# N
p1N <- c(p1N, mean(N[1:(det_phase[i, 1])]))
p2N <- c(p2N, mean(N[(det_phase[i, 1] + 1):det_phase[i, 2]]))
p3N <- c(p3N, mean(N[(det_phase[i, 2] + 1):length(N)]))
# I
p1I <- c(p1I, mean(I[1:(det_phase[i, 1])]))
p2I <- c(p2I, mean(I[(det_phase[i, 1] + 1):det_phase[i, 2]]))
p3I <- c(p3I, mean(I[(det_phase[i, 2] + 1):length(I)]))
if(i > 1){
if(length(N) < ncol(mN)){
N <- c(N, numeric(ncol(mN) - length(N)))
I <- c(I, numeric(ncol(mI) - length(I)))
} else if (length(N) > ncol(mN)){
m <- matrix(0, nrow = nrow(mN), ncol = length(N) - ncol(mN))
mN <- cbind(mN, m)
mI <- cbind(mI, m)
} else {
F
}
}
mN <- rbind(mN, N)
mI <- rbind(mI, I)
}
ggplot(data = data.frame(x = c(rep('p1', 10), rep('p2',10), rep('p3', 10)),
y = c(p1N, p2N, p3N),
z = rep(seq(0, 50, length.out = 10), 3)), aes(x, y))+
# geom_violin(trim = FALSE)+
geom_violin(draw_quantiles = 0.5, trim = FALSE)+
# geom_boxplot(width = 0.05)+
geom_dotplot(binaxis = 'y', stackdir = 'center', aes(x,y, fill = z))+
scale_fill_viridis()
# plot
ggplot(data = data.frame(x = c(rep('p1', 10), rep('p2',10), rep('p3', 10)),
y = c(p1I, p2I, p3I)), aes(x, y))+
geom_violin(trim = FALSE)+
geom_boxplot(width = 0.05)+
geom_dotplot(binaxis = 'y', stackdir = 'center')
avgN <- colMeans(mN)
avgI <- colMeans(mI)
df <- data.frame(x = 1:21600 /120, y = cumsum(avgI[1:21600])/ max(cumsum(avgI[1:21600])),
z = as.numeric(smooth(avgN[1:21600]), twiceit = T))
ggplot(data = df) +
geom_bracket(xmin = 0, xmax = mean(det_phase[, 1])/120,
y.position = 0.94, color = 'black',
label = 'Exploration', label.size = 5, size = 0.6, tip.length = 0.02) +
geom_bracket(xmin = mean(det_phase[, 1])/120, xmax = mean(det_phase[, 2])/120,
y.position = 1, color = 'black',
label = 'Food collection', label.size = 5, size = 0.6, tip.length = 0.02) +
geom_bracket(xmin = mean(det_phase[, 2])/120, xmax = 180,
y.position = 1.05, color = 'black',
label = 'Post-collection', label.size = 5, size = 0.6, tip.length = 0.02) +
geom_line(aes(x, z / max(z), color = 'N'), size = 1.2)+
geom_line(aes(x, y, color = 'IC'), size = 2)+
scale_y_continuous('Cumulated Interactions (IC)', limits = c(0, 30/max(avgN[1:21600])),
breaks = seq(0,30/max(avgN[1:21600]), length.out = 9),
labels = seq(0, 2000, 250),
sec.axis = sec_axis(~ .,
breaks = seq(0, 30/max(avgN[1:21600]), length.out = 7),
labels = seq(0, 30, 5), name = 'Population (N)'))+
scale_x_continuous('Time (min)', breaks = seq(0, 180, 20))+
scale_color_manual('', values = c('N' = viridis(1, begin= 0.25, end = 0.25),
'IC' = viridis(1, begin= 0.7, end = 0.7)))+
guides(color = guide_legend(override.aes = list(size = 3)))+
theme(axis.title.y = element_text(margin = margin(0, 10, 0, 0)),
axis.title.y.right =  element_text(margin = margin(0,0, 0, 10)))
p1N <- numeric()
p2N <- numeric()
p3N <- numeric()
p1I <- numeric()
p2I <- numeric()
p3I <- numeric()
mN <- numeric()
mI <- numeric()
for(i in seq_along(sto)){
N <- sto[[i]]$N
I <- sto[[i]]$I
# N
p1N <- c(p1N, mean(N[1:(sto_phase[i, 1])]))
p2N <- c(p2N, mean(N[(sto_phase[i, 1] + 1):sto_phase[i, 2]]))
p3N <- c(p3N, mean(N[(sto_phase[i, 2] + 1):length(N)]))
# I
p1I <- c(p1I, mean(I[1:(sto_phase[i, 1])]))
p2I <- c(p2I, mean(I[(sto_phase[i, 1] + 1):sto_phase[i, 2]]))
p3I <- c(p3I, mean(I[(sto_phase[i, 2] + 1):length(I)]))
if(i > 1){
if(length(N) < ncol(mN)){
N <- c(N, numeric(ncol(mN) - length(N)))
I <- c(I, numeric(ncol(mI) - length(I)))
} else if (length(N) > ncol(mN)){
m <- matrix(0, nrow = nrow(mN), ncol = length(N) - ncol(mN))
mN <- cbind(mN, m)
mI <- cbind(mI, m)
} else {
F
}
}
mN <- rbind(mN, N)
mI <- rbind(mI, I)
}
ggplot(data = data.frame(x = c(rep('p1', 9), rep('p2',9), rep('p3', 9)),
y = c(p1N[-2], p2N[-2], p3N[-2]),
z = rep(seq(0, 40, length.out = 9), 3)), aes(x, y))+
# geom_violin(trim = FALSE)+
# geom_violin(draw_quantiles = 0.5, trim = FALSE)+
geom_boxplot()+
geom_dotplot(binaxis = 'y', stackdir = 'center', aes(x,y, fill = z))+
scale_fill_viridis()
ggplot(data = data.frame(x = c(rep('p1', 9), rep('p2',9), rep('p3', 9)),
y = c(p1I[-2], p2I[-2], p3I[-2]),
z = rep(seq(0, 40, length.out = 9), 3)), aes(x, y))+
# geom_violin(trim = FALSE)+
# geom_violin(draw_quantiles = 0.5, trim = FALSE)+
geom_boxplot()+
geom_dotplot(binaxis = 'y', stackdir = 'center', aes(x,y, fill = z))+
scale_fill_viridis()
ggplot(data = data.frame(x = c(rep('p1', 9), rep('p2',9), rep('p3', 9)),
y = c(p1N[-2], p2N[-2], p3N[-2]),
z = rep(seq(0, 40, length.out = 9), 3)), aes(x, y))+
# geom_violin(trim = FALSE)+
# geom_violin(draw_quantiles = 0.5, trim = FALSE)+
geom_boxplot()+
geom_dotplot(binaxis = 'y', stackdir = 'center', aes(x,y, fill = z))+
scale_fill_viridis()
ggplot(data = data.frame(x = c(rep('p1', 9), rep('p2',9), rep('p3', 9)),
y = c(p1I[-2], p2I[-2], p3I[-2]),
z = rep(seq(0, 40, length.out = 9), 3)), aes(x, y))+
# geom_violin(trim = FALSE)+
# geom_violin(draw_quantiles = 0.5, trim = FALSE)+
geom_boxplot()+
geom_dotplot(binaxis = 'y', stackdir = 'center', aes(x,y, fill = z))+
scale_fill_viridis()
ggplot(data = df) +
geom_bracket(xmin = 0, xmax = mean(sto_phase[, 1])/120,
y.position = 0.94, color = 'black',
label = 'Exploration', label.size = 5, size = 0.6, tip.length = 0.02) +
geom_bracket(xmin = mean(sto_phase[, 1])/120, xmax = mean(sto_phase[, 2])/120,
y.position = 1, color = 'black',
label = 'Food collection', label.size = 5, size = 0.6, tip.length = 0.02) +
geom_bracket(xmin = mean(sto_phase[, 2])/120, xmax = 180,
y.position = 1.05, color = 'black',
label = 'Post-collection', label.size = 5, size = 0.6, tip.length = 0.02) +
geom_line(aes(x, z / max(z), color = 'N'), size = 1.2)+
geom_line(aes(x, y, color = 'IC'), size = 2)+
scale_y_continuous('Cumulated Interactions (IC)', limits = c(0, 37/max(avgN[1:21600])),
breaks = seq(0,35/max(avgN[1:21600]), length.out = 9),
labels = seq(0, 1000, 125),
sec.axis = sec_axis(~ .,
breaks = seq(0, 35/max(avgN[1:21600]), length.out = 8),
labels = seq(0, 35, 5), name = 'Population (N)'))+
scale_x_continuous('Time (min)', breaks = seq(0, 180, 20))+
scale_color_manual('', values = c('N' = viridis(1, begin= 0.25, end = 0.25),
'IC' = viridis(1, begin= 0.7, end = 0.7)))+
guides(color = guide_legend(override.aes = list(size = 3)))+
theme(axis.title.y = element_text(margin = margin(0, 10, 0, 0)),
axis.title.y.right =  element_text(margin = margin(0,0, 0, 10)))
avgN <- colMeans(mN[-2])
avgI <- colMeans(mI[-2])
df <- data.frame(x = 1:21600 /120, y = cumsum(avgI[1:21600])/ max(cumsum(avgI[1:21600])),
z = as.numeric(smooth(avgN[1:21600]), twiceit = T))
ggplot(data = df) +
geom_bracket(xmin = 0, xmax = mean(sto_phase[, 1])/120,
y.position = 0.94, color = 'black',
label = 'Exploration', label.size = 5, size = 0.6, tip.length = 0.02) +
geom_bracket(xmin = mean(sto_phase[, 1])/120, xmax = mean(sto_phase[, 2])/120,
y.position = 1, color = 'black',
label = 'Food collection', label.size = 5, size = 0.6, tip.length = 0.02) +
geom_bracket(xmin = mean(sto_phase[, 2])/120, xmax = 180,
y.position = 1.05, color = 'black',
label = 'Post-collection', label.size = 5, size = 0.6, tip.length = 0.02) +
geom_line(aes(x, z / max(z), color = 'N'), size = 1.2)+
geom_line(aes(x, y, color = 'IC'), size = 2)+
scale_y_continuous('Cumulated Interactions (IC)', limits = c(0, 37/max(avgN[1:21600])),
breaks = seq(0,35/max(avgN[1:21600]), length.out = 9),
labels = seq(0, 1000, 125),
sec.axis = sec_axis(~ .,
breaks = seq(0, 35/max(avgN[1:21600]), length.out = 8),
labels = seq(0, 35, 5), name = 'Population (N)'))+
scale_x_continuous('Time (min)', breaks = seq(0, 180, 20))+
scale_color_manual('', values = c('N' = viridis(1, begin= 0.25, end = 0.25),
'IC' = viridis(1, begin= 0.7, end = 0.7)))+
guides(color = guide_legend(override.aes = list(size = 3)))+
theme(axis.title.y = element_text(margin = margin(0, 10, 0, 0)),
axis.title.y.right =  element_text(margin = margin(0,0, 0, 10)))
dim(mN)
avgN <- colMeans(mN[-2, ])
avgI <- colMeans(mI[-2, ])
df <- data.frame(x = 1:21600 /120, y = cumsum(avgI[1:21600])/ max(cumsum(avgI[1:21600])),
z = as.numeric(smooth(avgN[1:21600]), twiceit = T))
ggplot(data = df) +
geom_bracket(xmin = 0, xmax = mean(sto_phase[, 1])/120,
y.position = 0.94, color = 'black',
label = 'Exploration', label.size = 5, size = 0.6, tip.length = 0.02) +
geom_bracket(xmin = mean(sto_phase[, 1])/120, xmax = mean(sto_phase[, 2])/120,
y.position = 1, color = 'black',
label = 'Food collection', label.size = 5, size = 0.6, tip.length = 0.02) +
geom_bracket(xmin = mean(sto_phase[, 2])/120, xmax = 180,
y.position = 1.05, color = 'black',
label = 'Post-collection', label.size = 5, size = 0.6, tip.length = 0.02) +
geom_line(aes(x, z / max(z), color = 'N'), size = 1.2)+
geom_line(aes(x, y, color = 'IC'), size = 2)+
scale_y_continuous('Cumulated Interactions (IC)', limits = c(0, 37/max(avgN[1:21600])),
breaks = seq(0,35/max(avgN[1:21600]), length.out = 9),
labels = seq(0, 1000, 125),
sec.axis = sec_axis(~ .,
breaks = seq(0, 35/max(avgN[1:21600]), length.out = 8),
labels = seq(0, 35, 5), name = 'Population (N)'))+
scale_x_continuous('Time (min)', breaks = seq(0, 180, 20))+
scale_color_manual('', values = c('N' = viridis(1, begin= 0.25, end = 0.25),
'IC' = viridis(1, begin= 0.7, end = 0.7)))+
guides(color = guide_legend(override.aes = list(size = 3)))+
theme(axis.title.y = element_text(margin = margin(0, 10, 0, 0)),
axis.title.y.right =  element_text(margin = margin(0,0, 0, 10)))
zlist_p1 <- vector('list', length(det))
zlist_p2 <- vector('list', length(det))
zlist_p3 <- vector('list', length(det))
f <- round(apply(do.call('rbind', lapply(seq_along(det),
function(i) range(do.call('rbind', det[[i]]$food)$t))),
2, mean))
# times javi 0-986 secs, 986-2696 secs, 2696-end
for(i in seq_along(det)){
t <- 1:f[1]
zlist_p1[[i]] <- pairwise_cov(det[[i]], t)
t <- f[1]:f[2]
zlist_p2[[i]] <- pairwise_cov(det[[i]], t)
t <- f[2]:max(det[[i]]$data$Frame)
zlist_p3[[i]] <- pairwise_cov(det[[i]], t)
}
sto <- sto[-2]
for(i in seq_along(sto)){
t <- food_detection(sto[[i]])
sto[[i]]$food$GP1$t <- t[1:6]
sto[[i]]$food$GP2$t <- t[7:12]
}
Szlist_p1 <- vector('list', length(sto))
Szlist_p2 <- vector('list', length(sto))
Szlist_p3 <- vector('list', length(sto))
Sf <- round(apply(do.call('rbind', lapply(seq_along(sto),
function(i) range(do.call('rbind', sto[[i]]$food)$t, na.rm = T))),
2, mean))
# times javi 0-986 secs, 986-2696 secs, 2696-end
for(i in seq_along(sto)){
t <- 1:Sf[1]
Szlist_p1[[i]] <- pairwise_cov(sto[[i]], t)
t <- Sf[1]:Sf[2]
Szlist_p2[[i]] <- pairwise_cov(sto[[i]], t)
t <- Sf[2]:max(sto[[i]]$data$Frame)
Szlist_p3[[i]] <- pairwise_cov(sto[[i]], t)
}
dZp1 <- apply(do.call('rbind', zlist_p1), 2, mean)
dZp1[dZp1 < 0] <- norm_range(dZp1[dZp1 < 0], a = -1, b = -.Machine$double.eps)
dZp1[dZp1 > 0] <- norm_range(dZp1[dZp1 > 0], a = .Machine$double.eps, b = 1)
dZp2 <- apply(do.call('rbind', zlist_p2), 2, mean)
dZp2[dZp2 < 0] <- norm_range(dZp2[dZp2 < 0], a = -1, b = -.Machine$double.eps)
dZp2[dZp2 > 0] <- norm_range(dZp2[dZp2 > 0], a = .Machine$double.eps, b = 1)
dZp3 <- apply(do.call('rbind', zlist_p3), 2, mean)
dZp3[dZp3 < 0] <- norm_range(dZp3[dZp3 < 0], a = -1, b = -.Machine$double.eps)
dZp3[dZp3 > 0] <- norm_range(dZp3[dZp3 > 0], a = .Machine$double.eps, b = 1)
dp1 <- draw_hexagons(det[[1]], z = dZp1, add = draw_hexagons(det[[1]], size = 3, color = 'black'),
size = 2.7, show.legend = F) + theme(aspect.ratio = 0.5)
dp2 <- draw_hexagons(det[[1]], z = dZp2, add = draw_hexagons(det[[1]], size = 3, color = 'black'),
size = 2.7, show.legend = F) + theme(aspect.ratio = 0.5)
dp3 <- draw_hexagons(det[[1]], z = dZp3, add = draw_hexagons(det[[1]], size = 3, color = 'black'),
size = 2.7, show.legend = F) + theme(aspect.ratio = 0.5)
grid.arrange(dp1,dp2,dp3,nrow = 3, ncol = 1)
STO_zp1 <- Szlist_p1
STO_zp2 <- Szlist_p2
STO_zp3 <- Szlist_p3
sZp1 <- apply(do.call('rbind', STO_zp1), 2, mean)
sZp1[sZp1 < 0] <- norm_range(sZp1[sZp1 < 0], a = -1, b = -.Machine$double.eps)
sZp1[sZp1 > 0] <- norm_range(sZp1[sZp1 > 0], a = .Machine$double.eps, b = 1)
sZp2 <- apply(do.call('rbind', STO_zp2), 2, mean)
sZp2[sZp2 < 0] <- norm_range(sZp2[sZp2 < 0], a = -1, b = -.Machine$double.eps)
sZp2[sZp2 > 0] <- norm_range(sZp2[sZp2 > 0], a = .Machine$double.eps, b = 1)
sZp3 <- apply(do.call('rbind', STO_zp3), 2, mean)
sZp3[sZp3 < 0] <- norm_range(sZp3[sZp3 < 0], a = -1, b = -.Machine$double.eps)
sZp3[sZp3 > 0] <- norm_range(sZp3[sZp3 > 0], a = .Machine$double.eps, b = 1)
# draw_hexagons(sto[[1]], z = z, add = draw_hexagons(sto[[1]], size = 2.3, color = 'black'), size = 2)
library(gridExtra)
sp1 <- draw_hexagons(sto[[1]], z = sZp1, add = draw_hexagons(sto[[1]], size = 3, color = 'black'),
size = 2.7, show.legend = F) + theme(aspect.ratio = 0.5)
sp2 <- draw_hexagons(sto[[1]], z = sZp2, add = draw_hexagons(sto[[1]], size = 3, color = 'black'),
size = 2.7, show.legend = F) + theme(aspect.ratio = 0.5)
sp3 <- draw_hexagons(sto[[1]], z = sZp3, add = draw_hexagons(sto[[1]], size = 3, color = 'black'),
size = 2.7, show.legend = F) + theme(aspect.ratio = 0.5)
grid.arrange(dp1, sp1, dp2, sp2, dp3, sp3, nrow = 3, ncol = 2)
