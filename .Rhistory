dev.off()
# draw_hexagons(sto[[1]], z = z, add = draw_hexagons(sto[[1]], size = 2.3, color = 'black'), size = 2)
sp1 <- draw_hexagons(sto[[1]], add = draw_hexagons(sto[[1]], size = 3, color = 'black',
add = draw_FoodPatches(sto[-2]),
add = draw_hexagons(sto[[1]], z = sZp1, size = 2.5, show.legend = F)),
) +
theme_void()+
theme(aspect.ratio = 0.5) + ggtitle('             Stochastic')
# draw_hexagons(sto[[1]], z = z, add = draw_hexagons(sto[[1]], size = 2.3, color = 'black'), size = 2)
sp1 <- draw_hexagons(sto[[1]], add = draw_hexagons(sto[[1]], size = 3, color = 'black',
add = draw_FoodPatches(sto[-2],
add = draw_hexagons(sto[[1]], z = sZp1, size = 2.5, show.legend = F))),
) +
theme_void()+
theme(aspect.ratio = 0.5) + ggtitle('             Stochastic')
sp1
# draw_hexagons(sto[[1]], z = z, add = draw_hexagons(sto[[1]], size = 2.3, color = 'black'), size = 2)
sp1 <- draw_hexagons(sto[[1]], add = draw_hexagons(sto[[1]], size = 3, color = 'black',
add = draw_FoodPatches(sto[-2],
add = draw_hexagons(sto[[1]],
z = sZp1,
size = 2.5,
show.legend = F,
linejoin = 'mitre'))),
) +
theme_void()+
theme(aspect.ratio = 0.5) + ggtitle('             Stochastic')
sp1
# draw_hexagons(sto[[1]], z = z, add = draw_hexagons(sto[[1]], size = 2.3, color = 'black'), size = 2)
sp1 <- draw_hexagons(sto[[1]], add = draw_hexagons(sto[[1]], size = 3, color = 'black',
add = draw_FoodPatches(sto[-2],
add = draw_hexagons(sto[[1]],
z = sZp1,
size = 2.5,
show.legend = F,
linejoin = 'bevel'))),
) +
theme_void()+
theme(aspect.ratio = 0.5) + ggtitle('             Stochastic')
sp1
# draw_hexagons(sto[[1]], z = z, add = draw_hexagons(sto[[1]], size = 2.3, color = 'black'), size = 2)
sp1 <- draw_hexagons(sto[[1]], add = draw_hexagons(sto[[1]], size = 3, color = 'black',
add = draw_FoodPatches(sto[-2],
add = draw_hexagons(sto[[1]],
z = sZp1,
size = 2.5,
show.legend = F,
linejoin = 'round'))),
) +
theme_void()+
theme(aspect.ratio = 0.5) + ggtitle('             Stochastic')
sp1
# draw_hexagons(sto[[1]], z = z, add = draw_hexagons(sto[[1]], size = 2.3, color = 'black'), size = 2)
sp1 <- draw_hexagons(sto[[1]], add = draw_hexagons(sto[[1]], size = 3, color = 'black',
add = draw_FoodPatches(sto[-2],
add = draw_hexagons(sto[[1]],
z = sZp1,
size = 2.5,
show.legend = F,
lineend= 'round'))),
) +
theme_void()+
theme(aspect.ratio = 0.5) + ggtitle('             Stochastic')
sp1
# draw_hexagons(sto[[1]], z = z, add = draw_hexagons(sto[[1]], size = 2.3, color = 'black'), size = 2)
sp1 <- draw_hexagons(sto[[1]], add = draw_hexagons(sto[[1]], size = 3, color = 'black',
add = draw_FoodPatches(sto[-2],
add = draw_hexagons(sto[[1]],
z = sZp1,
size = 2.5,
show.legend = F,
lineend= 'square'))),
) +
theme_void()+
theme(aspect.ratio = 0.5) + ggtitle('             Stochastic')
sp1
# draw_hexagons(sto[[1]], z = z, add = draw_hexagons(sto[[1]], size = 2.3, color = 'black'), size = 2)
sp1 <- draw_hexagons(sto[[1]], add = draw_hexagons(sto[[1]], size = 3, color = 'black',
add = draw_FoodPatches(sto[-2],
add = draw_hexagons(sto[[1]],
z = sZp1,
size = 2.5,
show.legend = F))),
linejoin = 'round') +
theme_void()+
theme(aspect.ratio = 0.5) + ggtitle('             Stochastic')
sp1
# draw_hexagons(sto[[1]], z = z, add = draw_hexagons(sto[[1]], size = 2.3, color = 'black'), size = 2)
sp1 <- draw_hexagons(sto[[1]], add = draw_hexagons(sto[[1]], size = 3, color = 'black',
add = draw_FoodPatches(sto[-2],
add = draw_hexagons(sto[[1]],
z = sZp1,
size = 2.5,
show.legend = F))),
linejoin = 'mitre') +
theme_void()+
theme(aspect.ratio = 0.5) + ggtitle('             Stochastic')
sp1
# draw_hexagons(sto[[1]], z = z, add = draw_hexagons(sto[[1]], size = 2.3, color = 'black'), size = 2)
sp1 <- draw_hexagons(sto[[1]], add = draw_hexagons(sto[[1]], size = 3, color = 'black',
add = draw_FoodPatches(sto[-2],
add = draw_hexagons(sto[[1]],
z = sZp1,
size = 2.5,
show.legend = F))),
linejoin = 'mitre', lineend = 'round') +
theme_void()+
theme(aspect.ratio = 0.5) + ggtitle('             Stochastic')
sp1
ggplot(data = data.frame(x = c(1, 1), y = c(1, 2))) + geom_line(lineend = 'round')
ggplot(data = data.frame(x = c(1, 1), y = c(1, 2)), aes(x, y)) + geom_line(lineend = 'round')
ggplot(data = data.frame(x = c(1, 1), y = c(1, 2)), aes(x, y)) + geom_line(lineend = 'round', size = 5)
ggplot(data = data.frame(x = c(1, 1, 2), y = c(1, 2, 2)), aes(x, y)) + geom_line(lineend = 'round', size = 5)
ggplot(data = data.frame(x = c(1, 1, 2), y = c(1, 2, 2)), aes(x, y)) + geom_line(lineend = 'round', linejoin = 'square', size = 5)
ggplot(data = data.frame(x = c(1, 1, 2), y = c(1, 2, 2)), aes(x, y)) + geom_line(linejoin = 'square', size = 5)
ggplot(data = data.frame(x = c(1, 1, 2), y = c(1, 2, 2)), aes(x, y)) + geom_line(linejoin = 'square', lineend = 'mitre', size = 5)
load("C:/Users/POL/Desktop/PIGS_REVIEW/prediction_fitsne.RData")
load("C:/Users/POL/Desktop/PIGS_REVIEW/prediction_bhtsne.RData")
source('C:/Users/POL/Desktop/PIGS_REVIEW/plot_functions.R') ## here plot_functions.R is the important source
source('C:/Users/POL/Desktop/PIGS_REVIEW/plot_functions.R') ## here plot_functions.R is the important source
source("G:/research/2022/sperm_move/src/FUNCTIONS.R")
load("C:/Users/POL/Desktop/PIGS_REVIEW/bh_list.RData")
load("C:/Users/POL/Desktop/PIGS_REVIEW/fit_list.RData")
load("C:/Users/POL/Desktop/PIGS_REVIEW/umap_result.RData")
load("C:/Users/POL/Desktop/PIGS_REVIEW/prediction_bhtsne.RData")
load("C:/Users/POL/Desktop/PIGS_REVIEW/prediction_fitsne.RData")
f <- read.csv("C:/Users/POL/Downloads/fertility_data.csv")
library(bigMap)
library(shadowtext)
library(ggpubr)
data <- na.omit(gbl[!duplicated(gbl[, c('VCL', 'VSL', 'ALH', 'BCF')]), ])
load("G:/gPigs/data/global_dataframe.RData")
rm(gbl)
load("C:/Users/POL/Downloads/sperm.RData")
data <- na.omit(sperm[!duplicated(sperm[, c('VCL', 'VSL', 'ALH', 'BCF')]), ])
Xw <- bdm.data(na.omit(sperm[!duplicated(sperm[, c('VCL', 'VSL', 'ALH', 'BCF')]),
c('VCL', 'VSL', 'ALH', 'BCF')]))[[1]][,]
colnames(Xw) <- c('VCL', 'VSL', 'ALH', 'BCF')
#### +++ ELPD +++ ####
combo <- append(bh_list$loo, fit_list$loo)
combo <- append(combo, umap_result$loo)
names(combo) <- c(paste('Barnes-Hut_', 2:15, sep = ''),
paste('FIt-SNE_', 2:15, sep = ''),
paste('UMAP_', 2:15, sep = ''))
B <- loo.profile(combo, sd = 'sd',
selected_models = c(`Barnes-Hut` = 11, `FIt-SNE` = 13, UMAP = 14)) +
guides(color = guide_legend(title = 'Embedding'))
#### +++ S2NR +++ ####
s2nr_fit <- bdm.optk.s2nr(Xw, fit_list$tsne, plot.optk = F, ret.optk = T, info = F)
s2nr_bh <- bdm.optk.s2nr(Xw, bh_list$tsne, plot.optk = F, ret.optk = T, info = F)
s2nr_umap <- bdm.optk.s2nr(Xw, umap_result$umap, plot.optk = F, ret.optk = T, info = F)
s2nr_df <- rbind(data.frame(S2NR = s2nr_bh$optk$H, Clusters = seq(s2nr_bh$wtt[[1]]$s, 2), TSNE = 'Barnes-Hut'),
data.frame(S2NR = s2nr_fit$optk$H, Clusters = seq(s2nr_fit$wtt[[1]]$s, 2), TSNE = 'FIt-SNE'),
data.frame(S2NR = s2nr_umap$optk$H, Clusters = seq(s2nr_umap$wtt[[1]]$s, 2), TSNE = 'UMAP'),
stringsAsFactors = F)
lvls_df <- data.frame(lvls = c(s2nr_bh$optk$lvls, s2nr_fit$optk$lvls, s2nr_umap$optk$lvls),
s2nr = c(s2nr_df$S2NR[s2nr_df$Clusters %in% s2nr_bh$optk$lvls & s2nr_df$TSNE == 'Barnes-Hut'],
s2nr_df$S2NR[s2nr_df$Clusters %in% s2nr_fit$optk$lvls & s2nr_df$TSNE == 'FIt-SNE'],
s2nr_df$S2NR[s2nr_df$Clusters %in% s2nr_umap$optk$lvls & s2nr_df$TSNE == 'UMAP']),
c = c(rep(viridis(3, end = 0.8)[1], 2),rep(viridis(3, end = 0.8)[2], 4),
rep(viridis(3, end = 0.8)[3], 3)))
lvls_df <- data.frame(x = c(13, 11, 14),
y = c(s2nr_df$S2NR[s2nr_df$TSNE == 'FIt-SNE' & s2nr_df$Clusters == 13],
s2nr_df$S2NR[s2nr_df$TSNE == 'Barnes-Hut' & s2nr_df$Clusters == 11],
s2nr_df$S2NR[s2nr_df$TSNE == 'UMAP' & s2nr_df$Clusters == 14]))
A <- ggplot(data = s2nr_df, aes(Clusters, S2NR, color = factor(TSNE))) +
geom_line(size = 1.25, show.legend = F)+
ylab('S2NR')+
scale_x_reverse(breaks = seq(2, max(s2nr_df$Clusters), 5)) +
scale_color_viridis_d('Embedding', labels = c('Barnes-Hut', 'FIt-SNE', 'UMAP'), end = 0.75)+
geom_segment(data = lvls_df, aes(x = x, xend = x, y = -Inf,  yend = y),
linetype = 2, color = 'grey80', size = 1.05)+
# geom_point(data = lvls_df, aes(lvls, s2nr), color = c, size = 2)+
geom_point(data = lvls_df, aes(x, y), color = 'black', size = 2)
#### +++ COEFFICIENTS +++ ####
m1 <- as.matrix(bh_list$models$bh639_11)
colnames(m1) <- gsub('k_', 'Cluster ', colnames(m1))
colnames(m1) <- gsub('Static_prop', 'Non motile', colnames(m1))
C <- custom_intervals(mcmc_intervals(m1, regex_pars = c('motile', 'Cluster'))$data)
#C <- mcmc_intervals(m1, regex_pars = c('motile', 'Cluster'))
# scale_x_continuous(labels = c(expression(paste('-2Â·', 10^3)),
#                               expression(paste('-1Â·', 10^3)), expression(0), expression(10^3), expression(paste('2Â·', 10^3))))+
# theme(plot.margin = unit(c(0.1, -1, 0, 0.1), 'cm'))
# m2 <- as.matrix(fit_list$models$fit639_15)
m2 <- as.matrix(fit_list$models$fit639_13)
colnames(m2) <- gsub('k_', 'Cluster ', colnames(m2))
colnames(m2) <- gsub('Static_prop', 'Non motile', colnames(m2))
#Cbis <- mcmc_intervals(m2, regex_pars = c('motile', 'Cluster'))
Cbis <- custom_intervals(mcmc_intervals(m2, regex_pars = c('motile', 'Cluster'))$data)
m3 <- as.matrix(umap_result$models$`Number of clusters = 14`)
colnames(m3) <- gsub('k_', 'Cluster ', colnames(m3))
colnames(m3) <- gsub('Static_prop', 'Non motile', colnames(m3))
Cbisbis <- custom_intervals(mcmc_intervals(m3, regex_pars = c('motile', 'Cluster'))$data)
# scale_x_continuous(labels = c(expression(paste('-2Â·', 10^3)), 0,
#                               expression(paste('2Â·', 10^3)), expression(paste('4Â·', 10^3)), expression(paste('6Â·', 10^3))))+
# theme(plot.margin = unit(c(0.1, 0.5, 0, 0.1), 'cm'))
Ccomb <- grid.arrange(C, Cbis, bottom = text_grob('Coefficient magnitude', size = 15), ncol = 2)
#### +++ PREDICTIONS +++ ####
# fit_pred <- get.predictions(fit_list$models$fit639_15,
#                             ft_prop = fert.props_male(fit_list$tsne, gbl, f, Xw, do.merge = NA), ret.model = T, plot = F)
# fit_pred <- get.predictions(fit_list$models$fit639_13,
#                             ft_prop = cluster_proportions(fit_list$tsne, gbl, f, Xw, do.merge = 13), ret.model = T, plot = F)
fit_pred <- prediction_fitsne
colnames(fit_pred) <- paste('Boar ', rank(colnames(fit_pred)), sep = '')
D <- custom_intervals(mcmc_intervals(fit_pred, prob = 0.5, prob_outer = 0.95)$data, vlines = c(0.8, 0.9)) +
theme(text = element_text(family = ''))+
scale_x_continuous('', breaks = seq(0, 1, 0.2), limits = c(0, 1))
D
# bh_pred <- get.predictions(p639$models$`1`$p639_8, ft_prop = fert.props_male(p639$tsne$`1`, gbl, f, Xw, do.merge = 8), ret.model = T, plot = F)
bh_pred <- prediction_bhtsne
colnames(bh_pred) <- paste('Boar ', rank(colnames(bh_pred)), sep = '')
D1 <- custom_intervals(mcmc_intervals(bh_pred, prob = 0.5, prob_outer = 0.95)$data, vlines = c(0.8, 0.9)) +
theme(text = element_text(family = ''))+
scale_x_continuous('', breaks = seq(0, 1, 0.2), limits = c(0, 1))
D1
umap_pred <- umap_result$prediction
D2 <- custom_intervals(mcmc_intervals(umap_pred, prob = 0.5, prob_outer = 0.95)$data, vlines = c(0.8, 0.9)) +
theme(text = element_text(family = ''))+
scale_x_continuous('', breaks = seq(0, 1, 0.2), limits = c(0, 1))
D2
D_ <- grid.arrange(D1, D, bottom = text_grob('Predicted fertility probability', size = 15), ncol = 2)
grid.arrange(A, B, C, Cbis, Cbisbis, D, D1, D2)
length(bdm.labels(umap_result$umap, merge = F))
length(unique(bdm.labels(umap_result$umap, merge = F)))
## boxplot comparison:
bhK <- assign_clusters(bh_list$tsne)
fitK <- assign_clusters(fit_list$tsne)
umapK <- assign_clusters(umap_result$umap)
bhK$effect <- '+'
coef(bh_list$models$bh639_11)[[1]][1, ]
bhK$effect[bhK$mK %in% c(1,3,5,8,11)] <- '-'
fitK$effect <- '+'
coef(fit_list$models$fit639_13)[[1]][1, ]
fitK$effect[fitK$mK %in% c(1,2,8,10,13,16,20,24)] <- '-'
umapK$effect <- '+'
coef(umap_result$models$`Number of clusters = 14`)[[1]][1, ]
umapK$effect[umapK$mK %in% c(2,7,13,15,18,20,27)] <- '-'
ggplot(data = melt(bhK, id.vars = 'effect'), aes(factor(effect), value)) + geom_boxplot() + facet_wrap(~ variable)
ggplot(data = melt(bhK[, c(2:9, 14)], id.vars = 'effect'), aes(factor(effect), value)) + geom_boxplot() + facet_wrap(~ variable)
ggplot(data = melt(bhK[, c(2:9, 14)], id.vars = 'effect'), aes(factor(effect), value)) +
geom_boxplot() + facet_wrap(~ variable, scales = 'free')
length(unique(bdm.labels(bh_list$tsne)))
length(unique(bdm.labels(fit_list$tsne)))
fit_list$tsne <- bdm.merge.s2nr(Xw, fit_list, k = 13, plot.merge = F, info = F, ret.merge = T)
class(Xw)
attr(Xw, 'class')
attr(Xw)
attr(Xw, class)
class(Xw) <- 'matrix'
class(Xw)
class(Xw) <- class(Xw)[1]
class(Xw)
fit_list$tsne <- bdm.merge.s2nr(Xw, fit_list$tsne, k = 13, plot.merge = F, info = F, ret.merge = T)
fitK <- assign_clusters(fit_list$tsne)
fitK$effect <- '+'
fitK$effect[fitK$mK %in% c(1,2,8,10,13,16,20,24)] <- '-'
ggplot(data = melt(fitK[, c(2:9, 14)], id.vars = 'effect'), aes(factor(effect), value)) +
geom_boxplot() + facet_wrap(~ variable, scales = 'free')
ggplot(data = melt(umapK[, c(2:9, 14)], id.vars = 'effect'), aes(factor(effect), value)) +
geom_boxplot() + facet_wrap(~ variable, scales = 'free')
png('C:/Users/POL/Desktop/PIGS_REVIEW/bh_boxplot.png', 2000, 1500, res = 200)
ggplot(data = melt(bhK[, c(2:9, 14)], id.vars = 'effect'), aes(factor(effect), value)) +
geom_boxplot() + facet_wrap(~ variable, scales = 'free') + ggtitle('BH')
dev.off()
png('C:/Users/POL/Desktop/PIGS_REVIEW/fit_boxplot.png', 2000, 1500, res = 200)
ggplot(data = melt(fitK[, c(2:9, 14)], id.vars = 'effect'), aes(factor(effect), value)) +
geom_boxplot() + facet_wrap(~ variable, scales = 'free') + ggtitle('FIT')
dev.off()
png('C:/Users/POL/Desktop/PIGS_REVIEW/umap_boxplot.png', 2000, 1500, res = 200)
ggplot(data = melt(umapK[, c(2:9, 14)], id.vars = 'effect'), aes(factor(effect), value)) +
geom_boxplot() + facet_wrap(~ variable, scales = 'free') + ggtitle('UMAP')
dev.off()
png('C:/Users/POL/Desktop/PIGS_REVIEW/bh_boxplot.png', 2000, 1500, res = 200)
ggplot(data = melt(bhK[, c(2:9, 14)], id.vars = 'effect'), aes(factor(effect), value)) +
geom_boxplot() + facet_wrap(~ variable, scales = 'free', ncol = 2) + ggtitle('BH')
dev.off()
png('C:/Users/POL/Desktop/PIGS_REVIEW/fit_boxplot.png', 2000, 1500, res = 200)
ggplot(data = melt(fitK[, c(2:9, 14)], id.vars = 'effect'), aes(factor(effect), value)) +
geom_boxplot() + facet_wrap(~ variable, scales = 'free', ncol = 2) + ggtitle('FIT')
dev.off()
png('C:/Users/POL/Desktop/PIGS_REVIEW/umap_boxplot.png', 2000, 1500, res = 200)
ggplot(data = melt(umapK[, c(2:9, 14)], id.vars = 'effect'), aes(factor(effect), value)) +
geom_boxplot() + facet_wrap(~ variable, scales = 'free', ncol = 2) + ggtitle('UMAP')
dev.off()
t.test(VCL ~ effect, data = bhK)
t.test(VSL ~ effect, data = bhK)
t.test(VSL ~ effect, data = fitK)
t.test(VSL ~ effect, data = umapK)
33.6/25.35
35.47/25.75
34.94/23.64
# STR
t.test(STR ~ effect, data = bhK)
t.test(STR ~ effect, data = fitK)
t.test(STR ~ effect, data = umapK)
# LIN
t.test(LIN ~ effect, data = bhK)
t.test(LIN ~ effect, data = fitK)
t.test(LIN ~ effect, data = umapK)
.mAC
.Machine$double.eps
t.test(VAP ~ effect, data = umapK)
t.test(VCL ~ effect, data = umapK)
t.test(STR ~ effect, data = umapK)
p <- cbind.data.frame(Boar = colnames(umap_pred), FR = apply(umap_pred, 2, median))
p
fr <- table(f$Boar, f$Success)
fr
fr <- apply(table(f$Boar, f$Success),1, function(i) i / sum(i))
fr
fr <- cbind.data.frame(Boar = rownames(table(f$Boar, f$Success)),
FR = apply(table(f$Boar, f$Success),1, function(i) i / sum(i))[2, ])
fr
x <- cbind(p[ord_p, ], fr = fr$FR)
ord_p <- order(p$Boar, decreasing = F)
x <- cbind(p[ord_p, ], fr = fr$FR)
v <- cor.test(x[order(x$FR, decreasing = T), c('FR')],
x[order(x$FR, decreasing = T), c('fr')], method = 'kendall')
x
v <- cor.test(x[order(x$FR, decreasing = T), c('FR')],
x[order(x$FR, decreasing = T), c('fr')], method = 'kendall', exact = F)
v
p
p <- cbind.data.frame(BH = colnames(bh_pred),
FIT = colnames(fit_pred),
UMAP = colnames(umap_pred))
p
sapply(p, function(i) gsub('Boar ','', i))
sapply(p, function(i) as.numeric(gsub('Boar ','', i)))
as.data.frame(sapply(p, function(i) as.numeric(gsub('Boar ','', i))))
p <- as.data.frame(sapply(p, function(i) as.numeric(gsub('Boar ','', i))))
cor.test(FIT ~ BH, data = p, method = 'kendall')
FIT ~ BH
cor.test(p$BH, p$FIT, method = 'kendall')
p <- cbind.data.frame(BH = colnames(bh_pred),
FIT = colnames(fit_pred),
UMAP = colnames(umap_pred))
cor.test(p$BH, p$FIT, method = 'kendall')
p <- as.data.frame(sapply(p, function(i) as.numeric(gsub('Boar ','', i))))
cor.test(p$BH, p$FIT, method = 'kendall')
cor.test(p$BH, p$UMAP, method = 'kendall')
plot(BH ~ FIT, data = p)
plot(BH ~ UMAP, data = p)
# KENDALL TAU
p <- cbind.data.frame(Boar = colnames(umap_pred), FR = apply(umap_pred, 2, median))
fr <- cbind.data.frame(Boar = rownames(table(f$Boar, f$Success)),
FR = apply(table(f$Boar, f$Success),1, function(i) i / sum(i))[2, ])
ord_p <- order(p$Boar, decreasing = F)
x <- cbind(p[ord_p, ], fr = fr$FR)
v <- cor.test(x[order(x$FR, decreasing = T), c('FR')],
x[order(x$FR, decreasing = T), c('fr')], method = 'kendall')
v <- cor.test(x[order(x$FR, decreasing = T), c('FR')],
x[order(x$FR, decreasing = T), c('fr')], method = 'kendall', exact = F)
v
p <- cbind.data.frame(Boar = colnames(bh_pred), FR = apply(umap_pred, 2, median))
fr <- cbind.data.frame(Boar = rownames(table(f$Boar, f$Success)),
FR = apply(table(f$Boar, f$Success),1, function(i) i / sum(i))[2, ])
ord_p <- order(p$Boar, decreasing = F)
x <- cbind(p[ord_p, ], fr = fr$FR)
v <- cor.test(x[order(x$FR, decreasing = T), c('FR')],
x[order(x$FR, decreasing = T), c('fr')], method = 'kendall', exact = F)
v
p <- cbind.data.frame(Boar = colnames(bh_pred), FR = apply(bh_pred, 2, median))
fr <- cbind.data.frame(Boar = rownames(table(f$Boar, f$Success)),
FR = apply(table(f$Boar, f$Success),1, function(i) i / sum(i))[2, ])
ord_p <- order(p$Boar, decreasing = F)
x <- cbind(p[ord_p, ], fr = fr$FR)
v <- cor.test(x[order(x$FR, decreasing = T), c('FR')],
x[order(x$FR, decreasing = T), c('fr')], method = 'kendall', exact = F)
v
p
fr
sort(fr$FR)
fr[order(fr$FR, decreasing = F), ]
fr[order(fr$FR, decreasing = T), ]
p
p <- p[order(p$Boar), ]
p
p <- p[order(as.numeric(gsub('Boar ', '', p$Boar))), ]
p
fr
fr <- fr[order(as.numeric(gsub('Boar ', '', fr$Boar))), ]
fr
p$fr <- fr$FR
p[order(p$FR), ]
p[order(p$FR, decreasing = T), ]
p <- p[order(as.numeric(gsub('Boar ', '', p$Boar))), ]
fr <- fr[order(as.numeric(gsub('Boar ', '', fr$Boar))), ]
p
p$boar_fr <- fr$Boar
p[order(p$FR, decreasing = T), ]
p <- p[order(p$FR, decreasing = T), ]
p$Boar
p$boar_fr[order(p$fr, decreasing = T)]
cor.test(p$Boar, p$boar_fr[order(p$fr, decreasing = T)])
cor.test(gsub('Boar ', '', p$Boar), gsub('Boar ', '',p$boar_fr[order(p$fr, decreasing = T)]))
cor.test(as.numeric(gsub('Boar ', '', p$Boar)),
as.numeric(gsub('Boar ', '',p$boar_fr[order(p$fr, decreasing = T)])))
cor.test(as.numeric(gsub('Boar ', '', p$Boar)),
as.numeric(gsub('Boar ', '',p$boar_fr[order(p$fr, decreasing = T)])), method = 'kendall')
fr <- sapply(sort(as.character(unique(f$Boar))), function(i) sum(f$Success[f$Boar == i]) / nrow(f[f$Boar == i,]))
pd <- umap_pred[, order(as.numeric(gsub('Boar ', '', colnames(umap_pred))))]
pd
pd <- apply(pd, 2, median)
pd
names(fr)
cor.test(as.numeric(factor(names(sort(pd, decreasing = T)))),
as.numeric(factor(names(sort(fr, decreasing = T)))), method = 'kendall')
as.numeric(factor(names(sort(pd, decreasing = T))))
names(pd) <- names(fr)
cor.test(as.numeric(factor(names(sort(pd, decreasing = T)))),
as.numeric(factor(names(sort(fr, decreasing = T)))), method = 'kendall')
fr <- sapply(sort(as.character(unique(f$Boar))), function(i) sum(f$Success[f$Boar == i]) / nrow(f[f$Boar == i,]))
pd <- umap_pred[, order(as.numeric(gsub('Boar ', '', colnames(umap_pred))))]
pd <- colMeans(pd)
cor.test(as.numeric(factor(names(sort(pd, decreasing = T)))),
as.numeric(factor(names(sort(fr, decreasing = T)))), method = 'kendall')
factor(names(sort(pd, decreasing = T)))
# KENDALL TAU
tmp <- apply(bh_pred, 2, median)
names(tmp)
fr <- sapply(sort(as.character(unique(f$Boar))), function(i) sum(f$Success[f$Boar == i]) / nrow(f[f$Boar == i,]))
fr
fr <- fr[order(gsub('Boar ', '', names(fr)))]
fr
fr <- fr[order(as.numeric(gsub('Boar ', '', names(fr))))]
fr
tmp
tmp[order(as.numeric(gsub('Boar ', '', names(tmp))))]
tmp_tbl <- cbind(Model = tmp[order(as.numeric(gsub('Boar ', '', names(tmp))))],
FR = fr)
tmp_tbñ
tmp_tbl
tmp_tbl <- tmp_tbl[order(tmp_tbl[, 1], decreasing = T), ]
tmp_tbl
cortest <- cor.test(order(tmp_tbl[, 1], decreasing = T), order(tmp_tbl[, 2], decreasing = T), method = 'kendall')
cortest
sort(fr)
sort(fr, decreasing = T)
rownames(tmp_tbl) == names(sort(fr, decreasing = T))
tmp_tbl
names(tmp_tbl)
rownames(tmp_tbl)
rownames(tmp_tbl)[order(tmp_tbl[, 2], decreasing = T)]
rownames(tmp_tbl)[order(tmp_tbl[, 2], decreasing = T)] == rownames(tmp_tbl)
sum(rownames(tmp_tbl)[order(tmp_tbl[, 2], decreasing = T)] == rownames(tmp_tbl))
6/17
cor.test(rownames(tmp_tbl)[order(tmp_tbl[, 2], decreasing = T)], rownames(tmp_tbl))
cor.test(rownames(tmp_tbl)[order(tmp_tbl[, 2], decreasing = T)], rownames(tmp_tbl), method = 'kendall')
cor.test(factor(rownames(tmp_tbl)[order(tmp_tbl[, 2], decreasing = T)]), factor(rownames(tmp_tbl)), method = 'kendall')
cor.test(as.numeric(factor(rownames(tmp_tbl)[order(tmp_tbl[, 2], decreasing = T)])), as.numeric(factor(rownames(tmp_tbl))), method = 'kendall')
cor.test(as.numeric(gsub('Boar ','',rownames(tmp_tbl)[order(tmp_tbl[, 2], decreasing = T)])),
as.numeric(gsub('Boar ','',rownames(tmp_tbl), method = 'kendall')))
cor.test(as.numeric(gsub('Boar ','',rownames(tmp_tbl)[order(tmp_tbl[, 2], decreasing = T)])),
as.numeric(gsub('Boar ','',rownames(tmp_tbl))), method = 'kendall')
cortest <- cor.test(order(tmp_tbl[, 1], decreasing = T), order(tmp_tbl[, 2], decreasing = T))
cortest
rank(tmp_tbl[, 1])
rank(-tmp_tbl[, 1])
rank(-tmp_tbl[, 2])
cor.test(rank(-tmp_tbl[, 2]), rank(-tmp_tbl[, 1]), method = 'kendall')
cor.test(rank(-tmp_tbl[, 2]), rank(-tmp_tbl[, 1]), method = 'kendall', exact = F)
tmp <- apply(fit_pred, 2, median)
tmp_tbl <- cbind(Model = tmp[order(as.numeric(gsub('Boar ', '', names(tmp))))], FR = fr)
tmp_tbl <- tmp_tbl[order(tmp_tbl[, 1], decreasing = T), ]
cor.test(rank(-tmp_tbl[, 2]), rank(-tmp_tbl[, 1]), method = 'kendall', exact = F)
tmp <- apply(umap_pred, 2, median)
tmp_tbl <- cbind(Model = tmp[order(as.numeric(gsub('Boar ', '', names(tmp))))], FR = fr)
tmp_tbl <- tmp_tbl[order(tmp_tbl[, 1], decreasing = T), ]
cor.test(rank(-tmp_tbl[, 2]), rank(-tmp_tbl[, 1]), method = 'kendall', exact = F)
# KENDALL TAU
fr <- sapply(sort(as.character(unique(f$Boar))), function(i) sum(f$Success[f$Boar == i]) / nrow(f[f$Boar == i,]))
fr <- fr[order(as.numeric(gsub('Boar ', '', names(fr))))]
tmp <- apply(bh_pred, 2, median)
tmp <- apply(fit_pred, 2, median)
tmp <- apply(umap_pred, 2, median)
tmp_tbl <- cbind(Model = tmp[order(as.numeric(gsub('Boar ', '', names(tmp))))], FR = fr)
tmp_tbl <- tmp_tbl[order(tmp_tbl[, 1], decreasing = T), ]
tmp_ta
tmp_tbl
cor.test(rank(-tmp_tbl[, 2]), rank(-tmp_tbl[, 1]), method = 'kendall', exact = F)
cor.test(tmp_tbl[, 2], tmp_tbl[, 1], method = 'kendall', exact = F)
tmp <- apply(bh_pred, 2, median)
tmp_tbl <- cbind(Model = tmp[order(as.numeric(gsub('Boar ', '', names(tmp))))], FR = fr)
tmp_tbl <- tmp_tbl[order(tmp_tbl[, 1], decreasing = T), ]
cor.test(tmp_tbl[, 2], tmp_tbl[, 1], method = 'kendall', exact = F)
tmp <- apply(fit_pred, 2, median)
tmp_tbl <- cbind(Model = tmp[order(as.numeric(gsub('Boar ', '', names(tmp))))], FR = fr)
tmp_tbl <- tmp_tbl[order(tmp_tbl[, 1], decreasing = T), ]
cor.test(tmp_tbl[, 2], tmp_tbl[, 1], method = 'kendall', exact = F)
?rank
fr
tmp[order(as.numeric(gsub('Boar ', '', names(tmp))))]
tmp <- apply(bh_pred, 2, median)
tmp1 <- apply(fit_pred, 2, median)
tmp2 <- apply(umap_pred, 2, median)
tmp_tbl <- cbind(bh = tmp[order(as.numeric(gsub('Boar ', '', names(tmp))))],
fit = tmp1[order(as.numeric(gsub('Boar ', '', names(tmp2))))],
umap = tmp2[order(as.numeric(gsub('Boar ', '', names(tmp2))))])
cor.test(tmp_tbl[, 2], tmp_tbl[, 1], method = 'kendall', exact = F)
cor.test(tmp_tbl[, 3], tmp_tbl[, 1], method = 'kendall', exact = F)
tmp_tbl
cor.test(tmp_tbl[, 2], tmp_tbl[, 3], method = 'kendall', exact = F)
tmp1[order(as.numeric(gsub('Boar ', '', names(tmp2))))]
tmp2[order(as.numeric(gsub('Boar ', '', names(tmp2))))]
tmp_tbl <- cbind(bh = tmp[order(as.numeric(gsub('Boar ', '', names(tmp))))],
fit = tmp1[order(as.numeric(gsub('Boar ', '', names(tmp1))))],
umap = tmp2[order(as.numeric(gsub('Boar ', '', names(tmp2))))])
cor.test(tmp_tbl[, 2], tmp_tbl[, 1], method = 'kendall', exact = F)
cor.test(tmp_tbl[, 3], tmp_tbl[, 1], method = 'kendall', exact = F)
cor.test(tmp_tbl[, 2], tmp_tbl[, 3], method = 'kendall', exact = F)
save.image("C:/Users/POL/Desktop/PIGS_REVIEW/BH_FIT_UMAP_ws.RData")
