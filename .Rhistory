source('G:/research/MoveAnts/code/config.R')
# expL <- lapply(expL$det, function(i) i[i$Ymm > 1000, ])
h <- hex90[hex90$rotY > 980, ]
colnames(h) <- c('x', 'y')
source('G:/research/2022/AnTracks/src/generic.R')
expL <- lapply(expL$det, function(i) init(i, refcoords = h,
class = 'coords'))
s <- compute_segments(expL[[1]])
expL <- lapply(expL, function(i){
c <- class(i)
x <- append(i, list(segments = s))
class(x) <- c
x
})
class(expL[[1]])
draw_hexagons(expL[[1]])
draw_hexagons(expL[[1]])
expl <- lapply(expL, function(i){
p = node_idx(i, seq_len(nrow(i$data)))
i$data$node <- p
i
})
node_idx.coords <- function(obj, row){
m <- cbind(obj$data[row, 'Xmm'],obj$data[row, 'Ymm'])
h <- cbind(obj$refcoords[, 1], obj$refcoords[, 2])
d <- pdist(h, m, ret.vec = FALSE)
idx <- apply(d, 2, which.min)
as.integer(rownames(obj$refcoords)[idx])
}
expl <- lapply(expL, function(i){
p = node_idx(i, seq_len(nrow(i$data)))
i$data$node <- p
i
})
library(beepr)
beep(5)
expL <- expl
rm(expl)
rm(exp)
food <- get.exp_foodLocation(expL[1])
food
food <- get.exp_foodLocation(expL[1])[1:2]
draw_FoodPatches
draw_foodpatches(food, q = draw_hexagons(expL[1]))
draw_foodpatches(food, q = draw_hexagons(expL[[1]]))
draw_foodpatches
food
food <- get.exp_foodLocation(expL[1])[[1]][1:2]
draw_foodpatches(food, q = draw_hexagons(expL[[1]]))
draw_foodpatches(food, q = draw_hexagons(expL[[1]]), alpha = 0.5, col = 'black', fill = 'grey')
draw_foodpatches(food, q = draw_hexagons(expL[[1]]), a = 0.5, col = 'black', fill = 'grey')
draw_foodpatches(food, q = draw_hexagons(expL[[1]]), a = 0.8, col = 'black', fill = 'grey')
draw_foodpatches(food, q = draw_hexagons(expL[[1]]), a = 0.8, col = 'black', fill = 'grey80')
draw_foodpatches(food, q = draw_hexagons(expL[[1]]), a = 0.8, col = 'black', fill = 'grey20')
draw_foodpatches(food, q = draw_hexagons(expL[[1]]), a = 0.8, col = 'black', fill = 'grey20')
source('C:/Users/POL/Desktop/gants_current/code/dev/dev_functions.R')
spatial_cov
local_cov <- function(obj){
UseMethod('local_cov')
}
v <- expL[[1]]$data$Frame
View(h)
s[s$o == 14, ]
s[s$o == 15, ]
get_neighbors <- function(obj, row){
UseMethod('get_neighbors')
}
get_neighbors.coords(obj, row){
if(!'segments' %in% names(obj)){
obj$segments <- compute_segments(obj)
}
if(!grepl('node', colnames(obj$data))){
nodes <- node_idx(obj, row)
} else {
nodes <- obj$data$node[row]
}
obj$segments$d[obj$segments$o == nodes]
}
get_neighbors.coords <- function(obj, row){
if(!'segments' %in% names(obj)){
obj$segments <- compute_segments(obj)
}
if(!grepl('node', colnames(obj$data))){
nodes <- node_idx(obj, row)
} else {
nodes <- obj$data$node[row]
}
obj$segments$d[obj$segments$o == nodes]
}
get_neighbors(expL[[1]], 1:30)
get_neighbors.coords <- function(obj, row){
if(!'segments' %in% names(obj)){
obj$segments <- compute_segments(obj)
}
if(!grepl('node', colnames(obj$data))){
nodes <- node_idx(obj, row)
} else {
nodes <- obj$data$node[row]
}
obj$segments$d[obj$segments$o %in% nodes]
}
get_neighbors(expL[[1]], 1:30)
get_neighbors.coords <- function(obj, row){
if(!'segments' %in% names(obj)){
obj$segments <- compute_segments(obj)
}
if(sum(grepl('node', colnames(obj$data))) == 1){
nodes <- node_idx(obj, row)
} else {
nodes <- obj$data$node[row]
}
obj$segments$d[obj$segments$o %in% nodes]
}
get_neighbors(expL[[1]], 1:30)
get_neighbors.coords <- function(obj, row){
if(!'segments' %in% names(obj)){
obj$segments <- compute_segments(obj)
}
if(sum(grepl('node', colnames(obj$data))) == 1){
nodes <- node_idx(obj, row)
} else {
nodes <- obj$data$node[row]
}
as.integer(obj$segments$d[obj$segments$o %in% nodes])
}
get_neighbors(expL[[1]], 1:30)
get_neighbors(expL[[1]], 1)
get_neighbors(expL[[1]], 2)
get_neighbors(expL[[1]], 3)
get_neighbors(expL[[1]], 4)
expL[[1]]$data$node[1]
s[s$o == 662]
s[s$o == 662, ]
t0 <- seq(0, max(v), 5)
t1 <- t0+50
max(t1)
max(t0)
c(0, 1, 1, 1, 0, 0, 1)
cor(c(0, 1, 1, 1, 0, 0, 1), c(1, 0, 0, 0, 1, 1, 0)
)
cor(c(0, 1, 1, 1, 0, 0, 1), c(1, 0, 0, 0, 1, 1, 0))
cor(c(0, 1, 1, 1, 0, 0, 1), c(1, 0, 0, 1, 1, 1, 0))
cor(c(0, 1, 1, 0, 0, 0, 1), c(1, 0, 0, 1, 1, 1, 0))
expL[[1]]$data[1:30, ]
matrix(0, ncol = 3, nrow = 3)
matrix(-1, ncol = 3, nrow = 3)
matrix(-1, ncol = 3, nrow = 3, dimnames = list(1:3, c(678, 436, 199)))
cov(matrix(-1, ncol = 3, nrow = 3, dimnames = list(1:3, c(678, 436, 199))))
plyr::rbind.fill.matrix
m <- matrix(-1, ncol = 3, nrow = 3)
m[] <- lapply(m, as.matrix)
m
rm(m)
plyr::rbind.fill.matrix
match(680, '680')
match(680, '681')
match(1, matrix(-1, ncol = 3, nrow = 3))
match(-1, matrix(-1, ncol = 3, nrow = 3))
match(matrix(-1, ncol = 3, nrow = 3), -1)
table(expL[[1]]$data[1:30, c('Frame', 'node')])
table(expL[[1]]$data[620:670, c('Frame', 'node')])
as.matrix(table(expL[[1]]$data[620:670, c('Frame', 'node')]))
t <- table(expL[[1]]$data[620:670, c('Frame', 'node')])
as.matrix(t)
t[, '608']
t[t == 0] <- -1
t
cov(t)
cov(as.matrix(t))
cov(t[, 1], t[, ยบ])
cov(t[, 1], t[, 1])
cor(t)
table
class(t) <- 'matrix'
t
cov(t[, 1], rep(-1, 50))
t[, 1]
rep(-1, 50)
length(t[, 1])
cov(t[, 1], rep(-1, 26))
t <- table(expL[[1]]$data[expL[[1]]$data$Frame > 1000 & expL[[1]]$data$Frame <= 1050, c('Frame', 'node')])
t <- table(expL[[1]]$data[expL[[1]]$data$Frame > 2000 & expL[[1]]$data$Frame <= 2050, c('Frame', 'node')])
t[t == 0] <- -1
t
cov(t)
plot(cov(t))
sbst <- expL[[1]]$data[expL[[1]]$data$Frame > 2000 & expL[[1]]$data$Frame <= 2050, c('Frame', 'node')]
rbind(sbst, c(NA, 999))
table(rbind(sbst, c(NA, 999)))
table(rbind(sbst, cbind(NA, c(999, 1000, 1111))))
cbind(NA, c(999, 1000, 1111))
cbind(Frame = NA, node = c(999, 1000, 1111))
table(rbind(sbst, cbind(Frame = NA, node = c(999, 1000, 1111))))
save.image("~/research/2022/AnTracks/CURRENT_WS.RData")
dev.off()
load("G:/research/2022/AnTracks/CURRENT_WS.RData")
str(t)
t
z <- cov(t)
z
zup <- z[upper.tri(z)]
zup
colnames(t)
as.integer(colnames(t))
ss <- expL[[1]]$segments[as.integer(colnames(t)) %in% expL[[1]]$segments$o, c('o', 'd')]
ss <- expL[[1]]$segments[as.integer(colnames(t)) == expL[[1]]$segments$o, c('o', 'd')]
View(ss)
colnames(t) %in% s$o
colnames(t) %in% s$d
match(colnames(t), s$o)
match(s$o, colnames(t))
s[s$o == colnames(t)]
s[s$o == colnames(t), ]
get_neighbors
get_neighbors.coords
s$o %in% colnames(t)
s[s$o %in% colnames(t), c('o', 'd')]
t
ss <- s[s$o %in% colnames(t), c('o', 'd')]
ss <- ss[ss$d %in% colnames(t)]
ss <- ss[ss$d %in% colnames(t), ]
ss
z
obj <- expL[[1]]
t = c(50, 5)
# initialize time vectors
tvec <- obj$data$Frame
t0 <- seq(0, max(obj$data$Frame), t[2])
t1 <- t0 + t[1]
sq <- lapply(seq_along(t0), function(i){
which(t > t0[i] & t <= t1)
})
# initialize a vector of 0s (covariance)
x <- numeric(length(sq))
names(sq) <- seq_along(sq)
sq <- sq[lapply(sq, length) > 0]
View(sq)
sq <- lapply(seq_along(t0), function(i){
which(t > t0[i] & t <= t1)
})
sq <- lapply(seq_along(t0), function(i){
which(tvec > t0[i] & tvec <= t1[i])
})
View(sq)
115*50
115*5
575+50
sq[[116]]
# initialize a vector of 0s (covariance)
x <- numeric(length(sq))
names(sq) <- seq_along(sq)
sq <- sq[lapply(sq, length) > 0]
idx <- as.integer(names(sq))
# calculate covariance for local neighbors
y <- vapply(seq_along(sq), function(i){
data <- obj$data[obj$data$Frame %in% sq[i], c('Frame', 'node')]
s <- obj$segments[obj$segments %in% data$node, c('o', 'd')]
neighbors <- get_neighbors(obj, sq[i])
data <- rbind(data, cbind(Frame = NA, node = neighbors))
s <- s[s$d %in% data$node, ]
t <- table(data)
t[t == 0] <- -1
z <- cov(t)
z <- vapply(seq_len(nrow(s)), function(k){
z[rownames(z) == s[k, 1] & colnames(z) == s[k, 2]]
}, numeric(1))
mean(z)
}, numeric(1))
class(obj)
grepl('node', colnames(obj$data))
sum(grepl('node', colnames(obj$data)) == 1)
sum(grepl('node', colnames(obj$data))) == 1
get_neighbors.coords <- function(obj, row){
if(!'segments' %in% names(obj)){
obj$segments <- compute_segments(obj)
}
if(sum(grepl('node', colnames(obj$data))) == 0){
nodes <- node_idx(obj, row)
} else {
nodes <- obj$data$node[row]
}
as.integer(obj$segments$d[obj$segments$o %in% nodes])
}
# calculate covariance for local neighbors
y <- vapply(seq_along(sq), function(i){
data <- obj$data[obj$data$Frame %in% sq[i], c('Frame', 'node')]
s <- obj$segments[obj$segments %in% data$node, c('o', 'd')]
neighbors <- get_neighbors(obj, sq[i])
data <- rbind(data, cbind(Frame = NA, node = neighbors))
s <- s[s$d %in% data$node, ]
t <- table(data)
t[t == 0] <- -1
z <- cov(t)
z <- vapply(seq_len(nrow(s)), function(k){
z[rownames(z) == s[k, 1] & colnames(z) == s[k, 2]]
}, numeric(1))
mean(z)
}, numeric(1))
nodes <- obj$data$node[sq[1]]
sq[1]
# calculate covariance for local neighbors
y <- vapply(seq_along(sq), function(i){
data <- obj$data[obj$data$Frame %in% sq[i], c('Frame', 'node')]
s <- obj$segments[obj$segments %in% data$node, c('o', 'd')]
neighbors <- get_neighbors(obj, sq[[i]])
data <- rbind(data, cbind(Frame = NA, node = neighbors))
s <- s[s$d %in% data$node, ]
t <- table(data)
t[t == 0] <- -1
z <- cov(t)
z <- vapply(seq_len(nrow(s)), function(k){
z[rownames(z) == s[k, 1] & colnames(z) == s[k, 2]]
}, numeric(1))
mean(z)
}, numeric(1))
beep(3)
library(beepr)
beep(3)
plot(y)
all(!is.finite(y))
rm(y)
i <- 1
data <- obj$data[obj$data$Frame %in% sq[[i]], c('Frame', 'node')]
sq[i]
sq[[i]]
obj$data[sq[[i]], c('Frame', 'node')]
data <- obj$data[sq[[i]], c('Frame', 'node')]
s <- obj$segments[obj$segments %in% data$node, c('o', 'd')]
obj$segments[obj$segments %in% data$node]
data$node
sum(obj$segments$o == 662)
data$node
sum(obj$segments$o %iN% 662)
sum(obj$segments$o %in% 662)
obj$segments[obj$segments %in% 662]
obj$segments[obj$segments %in% 662, ]
obj$segments[obj$segments$o %in% 662, ]
s <- obj$segments[obj$segments$o %in% data$node, c('o', 'd')]
neighbors <- get_neighbors(obj, sq[[i]])
data <- rbind(data, cbind(Frame = NA, node = neighbors))
s <- s[s$d %in% data$node, ]
t <- table(data)
t
t[t == 0] <- -1
z <- cov(t)
z
z <- vapply(seq_len(nrow(s)), function(k){
z[rownames(z) == s[k, 1] & colnames(z) == s[k, 2]]
}, numeric(1))
seq_len(nrow(s))
rownames(z) == s[1, 1]
colnames(z) == s[1, 1]
z
z[2, 2]
z <- vapply(seq_len(nrow(s)), function(k){
z[rownames(z) == s[k, 1] , colnames(z) == s[k, 2]]
}, numeric(1))
z
mean(z, na.rm = T)
as.numeric(NaN)
local_cov.coords <- function(obj, t = c(50, 5)){
# initialize time vectors
tvec <- obj$data$Frame
t0 <- seq(0, max(obj$data$Frame), t[2])
t1 <- t0 + t[1]
sq <- lapply(seq_along(t0), function(i){
which(tvec > t0[i] & tvec <= t1[i])
})
# initialize a vector of 0s (covariance)
x <- numeric(length(sq))
names(sq) <- seq_along(sq)
sq <- sq[lapply(sq, length) > 0]
idx <- as.integer(names(sq))
# calculate covariance for local neighbors
y <- vapply(seq_along(sq), function(i){
data <- obj$data[sq[[i]], c('Frame', 'node')]
s <- obj$segments[obj$segments$o %in% data$node, c('o', 'd')]
neighbors <- get_neighbors(obj, sq[[i]])
data <- rbind(data, cbind(Frame = NA, node = neighbors))
s <- s[s$d %in% data$node, ]
t <- table(data)
t[t == 0] <- -1
z <- cov(t)
z <- vapply(seq_len(nrow(s)), function(k){
z[rownames(z) == s[k, 1] , colnames(z) == s[k, 2]]
}, numeric(1))
mean(z, na.rm = T)
}, numeric(1))
# replace 0s with actual mean covariance
x[idx] <- y
x[!is.finite(x)] <- 0
x
}
load("G:/research/2022/AnTracks/CURRENT_WS.RData")
local_cov.coords <- function(obj, t = c(50, 5)){
# initialize time vectors
tvec <- obj$data$Frame
t0 <- seq(0, max(obj$data$Frame), t[2])
t1 <- t0 + t[1]
sq <- lapply(seq_along(t0), function(i){
which(tvec > t0[i] & tvec <= t1[i])
})
# initialize a vector of 0s (covariance)
x <- numeric(length(sq))
names(sq) <- seq_along(sq)
sq <- sq[lapply(sq, length) > 0]
idx <- as.integer(names(sq))
# calculate covariance for local neighbors
y <- vapply(seq_along(sq), function(i){
data <- obj$data[sq[[i]], c('Frame', 'node')]
s <- obj$segments[obj$segments$o %in% data$node, c('o', 'd')]
neighbors <- get_neighbors(obj, sq[[i]])
data <- rbind(data, cbind(Frame = NA, node = neighbors))
s <- s[s$d %in% data$node, ]
t <- table(data)
t[t == 0] <- -1
z <- cov(t)
z <- vapply(seq_len(nrow(s)), function(k){
z[rownames(z) == s[k, 1] , colnames(z) == s[k, 2]]
}, numeric(1))
mean(z, na.rm = T)
}, numeric(1))
# replace 0s with actual mean covariance
x[idx] <- y
x[!is.finite(x)] <- 0
x
}
tt <- Sys.time()
z <- local_cov(expL[[1]])
Sys.time() - tt
beepr::beep(3)
plot(z)
tt <- Sys.time()
expL <- lapply(expL, function(i){
c <- class(i)
z <- local_cov(i)
i$local_cov <- z
class(i) <- c
i
})
Sys.time() - tt
beepr::beep(3)
lapply(expL, function(i) plot(i$local_cov))
save.image("~/research/2022/AnTracks/CURRENT_WS.RData")
det <- expL
save(det. file = 'G:/research/2022/AnTracks/results/det_coords.RData')
save(det, file = 'G:/research/2022/AnTracks/results/det_coords.RData')
rm(list = ls())
source('G:/research/MoveAnts/code/config.R')
source('C:/Users/POL/Desktop/gants_current/code/dev/dev_functions.R')
# expL <- lapply(expL$det, function(i) i[i$Ymm > 1000, ])
h <- hex90[hex90$rotY > 980, ]
colnames(h) <- c('x', 'y')
source('G:/research/2022/AnTracks/src/generic.R')
expL <- lapply(expL$det, function(i) init(i, refcoords = h,
class = 'coords'))
rm(list = ls())
exp_condition <- 'sto'
source('G:/research/MoveAnts/code/config.R')
source('C:/Users/POL/Desktop/gants_current/code/dev/dev_functions.R')
# expL <- lapply(expL$det, function(i) i[i$Ymm > 1000, ])
h <- hex90[hex90$rotY > 980, ]
colnames(h) <- c('x', 'y')
source('G:/research/2022/AnTracks/src/generic.R')
expL <- lapply(expL$sto, function(i) init(i, refcoords = h,
class = 'coords'))
s <- compute_segments(expL[[1]])
expL <- lapply(expL, function(i){
c <- class(i)
x <- append(i, list(segments = s))
class(x) <- c
x
})
# visualization
draw_hexagons(expL[[1]])
food <- get.exp_foodLocation(expL[1])[[1]][1:2]
draw_foodpatches(food, q = draw_hexagons(expL[[1]]), a = 0.8, col = 'black', fill = 'grey20')
food <- get.exp_foodLocation(expL)
expL <- lapply(seq_along(expL), function(i){
p = node_idx(i, seq_len(nrow(expL[[i]]$data)))
expL[[i]]$data$node <- p
expL[[i]]$food <- food[[i]]
expL[[i]]
})
source('G:/research/2022/AnTracks/src/coords.R')
expL <- lapply(seq_along(expL), function(i){
p = node_idx(i, seq_len(nrow(expL[[i]]$data)))
expL[[i]]$data$node <- p
expL[[i]]$food <- food[[i]]
expL[[i]]
})
class(expL[[1]])
expL <- lapply(seq_along(expL), function(i){
p = node_idx(expL[[i]], seq_len(nrow(expL[[i]]$data)))
expL[[i]]$data$node <- p
expL[[i]]$food <- food[[i]]
expL[[i]]
})
beepr::beep(3)
tt <- Sys.time()
expL <- lapply(expL, function(i){
c <- class(i)
z <- local_cov(i)
i$local_cov <- z
class(i) <- c
i
})
Sys.time() - tt
beepr::beep(3)
sapply(expL, function(i) plot(i$local_cov))
sto <- expL
save(sto, file = 'G:/research/2022/AnTracks/results/sto_coords.RData')
