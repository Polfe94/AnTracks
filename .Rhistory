node <- sapply(1:nrow(d), function(i){which.min(pdist(
as.matrix(d[i, 1:2]), xy
))})
coord_correspondence$node <- node
coord_correspondence <- cbind(coord_correspondence, xy[coord_correspondence$node, ])
colnames(coord_correspondence) <- c('jx', 'jy', 'node', 'px', 'py')
ggplot(data = coord_correspondence) + geom_point(aes(jx, jy)) + geom_point(aes(px, py), color = 'red')
range(d[, 2])
d <- read.table(file = "G:/research/2022/AnTracks/data/Det_I.dat", header = F, sep = "")
coord_correspondence <- cbind(d[, 1:2])
d[, 2] <- d[, 2]  + 1000
xy <- as.matrix(det[[1]]$refcoords)
node <- sapply(1:nrow(d), function(i){which.min(pdist(
as.matrix(d[i, 1:2]), xy
))})
coord_correspondence$node <- node
coord_correspondence <- cbind(coord_correspondence, xy[coord_correspondence$node, ])
colnames(coord_correspondence) <- c('jx', 'jy', 'node', 'px', 'py')
ggplot(data = coord_correspondence) + geom_point(aes(jx, jy)) + geom_point(aes(px, py), color = 'red')
ggplot(data = coord_correspondence) + geom_point(aes(jx, jy+ 1000)) + geom_point(aes(px, py), color = 'red')
det[[1]]$food
get_node <- function(x, y, ref){
xy <- t(c(x, y))
which.min(pdist(xy, as.matrix(ref)))
}
get_node(589, 1465, det[[1]]$refcoords)
det[[1]]$refcoords[188,]
coords2matrix
range(det[[1]]$data$Crossings)
interaction_matrix <- function(obj){
if(!'coords' %in% class(obj)){
stop('Object must be of class "coords"')
}
if(!'node' %in% colnames(obj$data)){
stop('Object must have "node" computed')
}
n <- obj$data$node
t <- obj$data$Frame
m <- matrix(data = -1, ncol = length(unique(n)), nrow = max(t))
dimnames(m) <- list(seq_len(nrow(m)), unique(n))
t <- obj$data$Frame[obj$data$Crossings > 0]
for(i in seq_along(t)){
idx <- which(colnames(m) == n[i])
m[t[i], idx] <- 1
}
# class(m) <- 'nodes'
m
}
iii <- interaction_matrix(det[[1]])
plot(colSums(iii))
plot(rowSums(iii))
interaction_matrix <- function(obj){
if(!'coords' %in% class(obj)){
stop('Object must be of class "coords"')
}
if(!'node' %in% colnames(obj$data)){
stop('Object must have "node" computed')
}
n <- obj$data$node
t <- obj$data$Frame
m <- matrix(data = 0, ncol = length(unique(n)), nrow = max(t))
dimnames(m) <- list(seq_len(nrow(m)), unique(n))
t <- obj$data$Frame[obj$data$Crossings > 0]
for(i in seq_along(t)){
idx <- which(colnames(m) == n[i])
m[t[i], idx] <- 1
}
# class(m) <- 'nodes'
m
}
iii <- interaction_matrix(det[[1]])
plot(rowSums(iii))
sum(iii)
sum(det[[1]]$data$Crossings)
plot(det[[1]]$data$Frame, det[[1]]$data$Crossings)
plot(unique(det[[1]]$data$Frame), vapply(det[[1]]$data$Frame, function(i) sum(det[[1]]$data$Crossings[det[[1]]$data$Frame == i]), numeric(1)))
t <- unique(det[[1]]$data$Frame)
tThat <- det[[1]]$data$Frame[det[[1]]$data$Crossings > 0]
tt <- unique(tThat)
y <- numeric(length(t))
ly <- vapply(tt, function(i) sum(det[[1]]$data$Crossings[det[[1]]$data$Frame == i]), numeric(1))
y[tt %in% t] <- ly
y <- numeric(length(t))
for(i in seq_along(tt)){y[t == tt[i]] <- ly[i]}
plot(t, y)
interaction_matrix <- function(obj){
if(!'coords' %in% class(obj)){
stop('Object must be of class "coords"')
}
if(!'node' %in% colnames(obj$data)){
stop('Object must have "node" computed')
}
n <- obj$data$node
t <- obj$data$Frame
m <- matrix(data = 0, ncol = length(unique(n)), nrow = max(t))
dimnames(m) <- list(seq_len(nrow(m)), unique(n))
t <- obj$data$Frame[obj$data$Crossings > 0]
for(i in seq_along(t)){
idx <- which(colnames(m) == n[i])
m[t[i], idx] <- m[t[i], idx] + 1
}
# class(m) <- 'nodes'
m
}
iii <- interaction_matrix(det[[1]])
plot(iii)
plot(rowSums(iii))
sum(iii)
rm(iii)
rm(list = ls())
source('G:/research/2022/AnTracks/src/generic.R')
source('G:/research/2022/AnTracks/src/coords.R')
source('G:/research/2022/AnTracks/src/nodes.R')
load('G:/research/2022/AnTracks/results/det_coords.RData')
load('G:/research/2022/AnTracks/results/sto_coords.RData')
if(file.exists("G:/research/2022/AnTracks/data/Det_I.dat")){
d <- read.table(file = "G:/research/2022/AnTracks/data/Det_I.dat", header = F, sep = "")
} else {
if(file.exists("~/research/2022/AnTracks/data/Det_I.dat")){
d <- read.table(file = "~/research/2022/AnTracks/data/Det_I.dat", header = F, sep = "")
} else {
stop("Could not find data !")
}
}
coord_correspondence <- cbind(d[, 1:2])
d[, 2] <- d[, 2]  + 1000
xy <- as.matrix(det[[1]]$refcoords)
node <- sapply(1:nrow(d), function(i){which.min(pdist(
as.matrix(d[i, 1:2]), xy
))})
coord_correspondence$node <- node
coord_correspondence <- cbind(coord_correspondence, xy[coord_correspondence$node, ])
colnames(coord_correspondence) <- c('jx', 'jy', 'node', 'px', 'py')
ggplot(data = coord_correspondence) + geom_point(aes(jx, jy+ 1000)) + geom_point(aes(px, py), color = 'red')
det[[1]]$food
names(sto)
det_food <- rbind(data.frame(node = vapply(1:6, function(i){
get_node(det[[1]]$food[[1]][i, 1], det[[1]]$food[[1]][i, 2], det[[1]]$refcoords)
}, numeric(1)), patch = "p1"),
data.frame(node = vapply(1:6, function(i){
get_node(det[[1]]$food[[2]][i, 1], det[[1]]$food[[2]][i, 2], det[[1]]$refcoords)
}, numeric(1)), patch = "p2"))
det_food
sto_food <- c()
for(x in seq_along(sto)[-2]){
sto_food <- rbind(sto_food, rbind(
data.frame(node = vapply(1:6, function(i){
get_node(sto[[x]]$food[[1]][i, 1], sto[[x]]$food[[1]][i, 2], sto[[x]]$refcoords)
}, numeric(1)), patch = "p1", exp = sto[[i]]$date),
data.frame(node = vapply(1:6, function(i){
get_node(sto[[x]]$food[[2]][i, 1], sto[[x]]$food[[2]][i, 2], sto[[x]]$refcoords)
}, numeric(1)), patch = "p2", exp = sto[[i]]$date)
))
}
sto_food <- c()
for(x in seq_along(sto)[-2]){
sto_food <- rbind(sto_food, rbind(
data.frame(node = vapply(1:6, function(i){
get_node(sto[[x]]$food[[1]][i, 1], sto[[x]]$food[[1]][i, 2], sto[[x]]$refcoords)
}, numeric(1)), patch = "p1", exp = sto[[x]]$date),
data.frame(node = vapply(1:6, function(i){
get_node(sto[[x]]$food[[2]][i, 1], sto[[x]]$food[[2]][i, 2], sto[[x]]$refcoords)
}, numeric(1)), patch = "p2", exp = sto[[x]]$date)
))
}
108/12
sto_food
det_food
write.table(det_food, file = "G:/research/2022/AnTracks/data/det_food.csv", sep = ',', dec = '.')
write.table(sto_food, file = "G:/research/2022/AnTracks/data/sto_food.csv", sep = ',', dec = '.')
sto_food <- c()
for(x in seq_along(sto)){
sto_food <- rbind(sto_food, rbind(
data.frame(node = vapply(1:6, function(i){
get_node(sto[[x]]$food[[1]][i, 1], sto[[x]]$food[[1]][i, 2], sto[[x]]$refcoords)
}, numeric(1)), patch = "p1", exp = sto[[x]]$date),
data.frame(node = vapply(1:6, function(i){
get_node(sto[[x]]$food[[2]][i, 1], sto[[x]]$food[[2]][i, 2], sto[[x]]$refcoords)
}, numeric(1)), patch = "p2", exp = sto[[x]]$date)
))
}
write.table(sto_food, file = "G:/research/2022/AnTracks/data/sto_food.csv", sep = ',', dec = '.')
sto_food
iii <- interaction_matrix(det[[1]])
plot(det[[1]]$refcoords[as.numeric(rownames(iii)), ])
plot(det[[1]]$refcoords[as.numeric(colnames(iii)), ])
ncol(iii)
mmm <- coords2matrix(det[[1]])
ncol(mmm)
plot(unique(det[[1]]$data[, c("Xmm", "Ymm")]))
length(unique(det[[1]]$data$node))
coords2idx
closest_node
interaction_matrix <- function(obj){
if(!'coords' %in% class(obj)){
stop('Object must be of class "coords"')
}
if(!'node' %in% colnames(obj$data)){
stop('Object must have "node" computed')
}
n <- obj$data$node
t <- obj$data$Frame[obj$data$Crossings > 0]
m <- matrix(data = 0, ncol = length(unique(n)),
nrow = max(obj$data$Frame))
dimnames(m) <- list(seq_len(nrow(m)), unique(n))
for(i in seq_along(t)){
idx <- which(colnames(m) == n[i])
m[t[i], idx] <- m[t[i], idx] + 1
# m[t[i], idx] <- 1
}
m
}
coords2matrix
closest_node
df <- det[[1]]$data[, c('Xmm', 'Ymm')]
df <- as.matrix(df)
class(df)
h <- det[[1]]$refcoords
h <- as.matrix(h)
nde <- vapply(1:nrow(df), function(i) which.min(pdist(df[i, ], h)), integer(1))
df[1, ]
is.matrix(df[1, ])
is.matrix(df)
nde <- vapply(1:nrow(df), function(i) which.min(pdist(as.matrix(df[i, ]), h)), integer(1))
nde <- vapply(1:nrow(df), function(i) which.min(pdist(t(df[i, ]), h)), integer(1))
beepr::beep(3)
length(unique(nde))
points(det[[1]]$refcoords[unique(nde), ], pch = 19, col = 'red')
plot(det[[1]]$refcoords[unique(nde), ])
plot(det[[1]]$refcoords[as.numeric(colnames(mmm)), ])
ncol(mmm)
length(unique(colnames(mmm)))
head(colnames(mmm))
all(as.numeric(colnames(mmm)) %in% nde)
sum(as.numeric(colnames(mmm)) %in% nde)
plot(hex[as.numeric(colnames(mmm)), ])
coords2matrix
sum(det[[1]]$refcoords[,2 ] > 1000)
det_food <- rbind(data.frame(node = vapply(1:6, function(i){
get_node(det[[1]]$food[[1]][i, 1], det[[1]]$food[[1]][i, 2], hex)
}, numeric(1)), patch = "p1"),
data.frame(node = vapply(1:6, function(i){
get_node(det[[1]]$food[[2]][i, 1], det[[1]]$food[[2]][i, 2], hex)
}, numeric(1)), patch = "p2"))
write.table(det_food, file = "G:/research/2022/AnTracks/data/det_food.csv", sep = ',', dec = '.')
sto_food <- c()
for(x in seq_along(sto)){
sto_food <- rbind(sto_food, rbind(
data.frame(node = vapply(1:6, function(i){
get_node(sto[[x]]$food[[1]][i, 1], sto[[x]]$food[[1]][i, 2], sto[[x]]$refcoords)
}, numeric(1)), patch = "p1", exp = sto[[x]]$date),
data.frame(node = vapply(1:6, function(i){
get_node(sto[[x]]$food[[2]][i, 1], sto[[x]]$food[[2]][i, 2], sto[[x]]$refcoords)
}, numeric(1)), patch = "p2", exp = sto[[x]]$date)
))
}
write.table(sto_food, file = "G:/research/2022/AnTracks/data/sto_food.csv", sep = ',', dec = '.')
points(det_food[, 1:2], pch=19)
points(hex[det_food[, 1],], pch=19)
point(hex[as.numeric(colnames(iii)[which(colSums(iii) > 0)])], col = 'red')
points(hex[as.numeric(colnames(iii)[which(colSums(iii) > 0)])], col = 'red')
points(hex[as.numeric(colnames(iii)[which(colSums(iii) > 0)]), ], col = 'red')
points(hex[as.numeric(colnames(iii)[which(colSums(iii) > 0)]), ], col = 'black')
iii <- interaction_matrix(det[[@]])
iii <- interaction_matrix(det[[2]])
points(hex[as.numeric(colnames(iii)[which(colSums(iii) > 0)]), ], col = 'red')
d <- read.table(file = "G:/research/2022/AnTracks/data/Det_I.dat", header = F, sep = "")
coord_correspondence <- cbind(d[, 1:2])
d[, 2] <- d[, 2]  + 1000
xy <- as.matrix(hex)
node <- sapply(1:nrow(d), function(i){which.min(pdist(
as.matrix(d[i, 1:2]), xy
))})
coord_correspondence$node <- node
coord_correspondence <- cbind(coord_correspondence, xy[coord_correspondence$node, ])
colnames(coord_correspondence) <- c('jx', 'jy', 'node', 'px', 'py')
ggplot(data = coord_correspondence) + geom_point(aes(jx, jy+ 1000)) + geom_point(aes(px, py), color = 'red')
plot(hex[coord_correspondence$node, ])
range(coord_correspondence$node)
write.table(coord_correspondence,
file = "G:/research/2022/AnTracks/data/coord_correspondence.csv", sep = ',', dec = '.')
plot(hex[coord_correspondence$node, ])
points(hex[sto_food[, 1], ], pch = 19)
det_food <- rbind(data.frame(node = vapply(1:6, function(i){
get_node(det[[1]]$food[[1]][i, 1], det[[1]]$food[[1]][i, 2], hex)
}, numeric(1)), patch = "p1"),
data.frame(node = vapply(1:6, function(i){
get_node(det[[1]]$food[[2]][i, 1], det[[1]]$food[[2]][i, 2], hex)
}, numeric(1)), patch = "p2"))
write.table(det_food, file = "G:/research/2022/AnTracks/data/det_food.csv", sep = ',', dec = '.')
sto_food <- c()
for(x in seq_along(sto)){
sto_food <- rbind(sto_food, rbind(
data.frame(node = vapply(1:6, function(i){
get_node(sto[[x]]$food[[1]][i, 1], sto[[x]]$food[[1]][i, 2], hex)
}, numeric(1)), patch = "p1", exp = sto[[x]]$date),
data.frame(node = vapply(1:6, function(i){
get_node(sto[[x]]$food[[2]][i, 1], sto[[x]]$food[[2]][i, 2], hex)
}, numeric(1)), patch = "p2", exp = sto[[x]]$date)
))
}
write.table(sto_food, file = "G:/research/2022/AnTracks/data/sto_food.csv", sep = ',', dec = '.')
plot(hex[coord_correspondence$node, ])
points(hex[sto_food[, 1], ], pch = 19)
length(unique(sto_food$node))
106/12
120-106
dev.off()
rm(list = ls())
source('G:/research/2022/AnTracks/src/generic.R')
source('G:/research/2022/AnTracks/src/coords.R')
source('G:/research/2022/AnTracks/src/nodes.R')
load('G:/research/2022/AnTracks/results/det_coords.RData')
load('G:/research/2022/AnTracks/results/sto_coords.RData')
if(file.exists("G:/research/2022/AnTracks/data/Det_I.dat")){
d <- read.table(file = "G:/research/2022/AnTracks/data/Det_I.dat", header = F, sep = "")
} else {
if(file.exists("~/research/2022/AnTracks/data/Det_I.dat")){
d <- read.table(file = "~/research/2022/AnTracks/data/Det_I.dat", header = F, sep = "")
} else {
stop("Could not find data !")
}
}
coord_correspondence <- cbind(d[, 1:2])
d[, 2] <- d[, 2]  + 1000
xy <- as.matrix(hex)
node <- sapply(1:nrow(d), function(i){which.min(pdist(
as.matrix(d[i, 1:2]), xy
))})
coord_correspondence$node <- node
coord_correspondence <- cbind(coord_correspondence, xy[coord_correspondence$node, ])
colnames(coord_correspondence) <- c('jx', 'jy', 'node', 'px', 'py')
write.table(coord_correspondence,
file = "G:/research/2022/AnTracks/data/coord_correspondence.csv", sep = ',', dec = '.')
# ggplot(data = coord_correspondence) + geom_point(aes(jx, jy+ 1000)) + geom_point(aes(px, py), color = 'red')
det_food <- rbind(data.frame(node = vapply(1:6, function(i){
get_node(det[[1]]$food[[1]][i, 1], det[[1]]$food[[1]][i, 2], hex)
}, numeric(1)), patch = "p1"),
data.frame(node = vapply(1:6, function(i){
get_node(det[[1]]$food[[2]][i, 1], det[[1]]$food[[2]][i, 2], hex)
}, numeric(1)), patch = "p2"))
write.table(det_food, file = "G:/research/2022/AnTracks/data/det_food.csv", sep = ',', dec = '.')
sto_food <- c()
for(x in seq_along(sto)){
sto_food <- rbind(sto_food, rbind(
data.frame(node = vapply(1:6, function(i){
get_node(sto[[x]]$food[[1]][i, 1], sto[[x]]$food[[1]][i, 2], hex)
}, numeric(1)), patch = "p1", exp = sto[[x]]$date),
data.frame(node = vapply(1:6, function(i){
get_node(sto[[x]]$food[[2]][i, 1], sto[[x]]$food[[2]][i, 2], hex)
}, numeric(1)), patch = "p2", exp = sto[[x]]$date)
))
}
write.table(sto_food, file = "G:/research/2022/AnTracks/data/sto_food.csv", sep = ',', dec = '.')
## interaction matrices
det_I <- lapply(seq_along(det), function(i){
interaction_matrix(det[[i]])
})
sto_I <- lapply(seq_along(sto), function(i){
interaction_matrix(sto[[i]])
})
interaction_matrix
plot(hex[as.numeric(colnames(sto_I[[5]])), ])
## interaction matrices
sbst <- as.character(which(hex$y > 1000))
length(colnames(det_I[[1]]) %in% sbst)
length(colnames(det_I[[10]]) %in% sbst)
hex[as.numeric(colnames(det_I[[10]])), ]
plot(hex[as.numeric(colnames(det_I[[10]])), ])
sum(hex[as.numeric(colnames(det_I[[10]])), 2] > 1000)
sum(hex[as.numeric(colnames(det_I[[10]])), 2] > 1000, na.rm = T)
which(is.na(hex[as.numeric(colnames(det_I[[10]])), 2] > 1000))
is.na(hex[as.numeric(colnames(det_I[[10]])), 2] > 1000)
is.na(as.numeric(colnames(det_I[[10]])))
which(is.na(hex[as.numeric(colnames(det_I[[10]])), 2] > 1000))
as.numeric(colnames(det_I[[10]]))[606]
plot(hex[as.numeric(colnames(det_I[[10]]))])
plot(hex[as.numeric(colnames(det_I[[10]])), ])
hex[as.numeric(colnames(det_I[[10]])), 2] > 1000
hex[as.numeric(colnames(det_I[[10]])), 2] > 1000 == TRUE | NA
isTRUE(hex[as.numeric(colnames(det_I[[10]])), 2] > 1000) | is.na(hex[as.numeric(colnames(det_I[[10]])), 2] > 1000)
!isTRUE(hex[as.numeric(colnames(det_I[[10]])), 2] > 1000) | is.na(hex[as.numeric(colnames(det_I[[10]])), 2] > 1000)
!isTRUE(hex[as.numeric(colnames(det_I[[10]])), 2] > 1000) | !is.na(hex[as.numeric(colnames(det_I[[10]])), 2] > 1000)
length(sbst)
pq <- det_I[[10]][, colnames(det_I[[10]]) %in% sbst]
ncol(pq)
ncol(det_I[[10]])
plot(hex[as.numeric(colnames(pq)), ])
det[[1]]$date
for(i in seq_along(det_I)){
det_I[[i]] <- det_I[[i]][, colnames(det_I[[i]]) %in% sbst]
write.table(det_I[[i]],
file = paste0("G:/research/2022/AnTracks/results/Dani_Campos/",
det[[i]]$date,".csv"), sep = ',', dec = '.')
}
for(i in seq_along(sto_I)){
sto_I[[i]] <- sto_I[[i]][, colnames(sto_I[[i]]) %in% sbst]
write.table(sto_I[[i]],
file = paste0("G:/research/2022/AnTracks/results/Dani_Campos/",
sto[[i]]$date,".csv"), sep = ',', dec = '.')
}
print(det[[7]]$date)
print(sto[[2]]$date)
write.table(coord_correspondence[, 1:3],
file = "G:/research/2022/AnTracks/data/coord_correspondence.csv", sep = ',', dec = '.')
if(!exists('det')){
if(exists('sto')){
det <- list(list(segments = sto[[1]]$segments))
} else {
stop('Could not find a valid "segments" object.')
}
}
sgm <- det[[1]]$segments
food <- det[[1]]$food
centers <- rbind(food[[1]][5, 1:2], food[[2]][5, 1:2])
centers$y <- centers$y - 50
nest <- get_nest()
nest[2] <- nest[2] + 100
centers <- rbind(centers, nest)
idx_1 <- inRadius(coords = sgm[, 1:2], center = c(centers[1, ], recursive = T), r = 150)
idx_2 <- inRadius(coords = sgm[, 1:2], center = c(centers[2, ], recursive = T), r = 150)
idx_3 <- inRadius(coords = sgm[, 1:2], center = nest, r = 150)
regions <- sgm[idx_1 | idx_2 | idx_3, c('x', 'y')]
regions$region <- c(rep('food_patch_1', sum(idx_1)),rep('food_patch_2', sum(idx_2)),rep('nest', sum(idx_3)))
print(
suppressMessages(
draw_hexagons(det[[1]], add = ggplot(data = sgm[idx_1 | idx_2 | idx_3, ], aes(x, y))+geom_point())+
geom_circle(centers, 150, color = 'blue')
))
nest()
nest
print(
suppressMessages(
draw_hexagons(det[[1]], add = ggplot(data = sgm[idx_1 | idx_2 | idx_3, ], aes(x, y))+geom_point())+
geom_circle(centers, 150, color = 'blue') +
geom_point(data = nest, aes(x, y-100), color = 'red')
))
print(
suppressMessages(
draw_hexagons(det[[1]], add = ggplot(data = sgm[idx_1 | idx_2 | idx_3, ], aes(x, y))+geom_point())+
geom_circle(centers, 150, color = 'blue') +
geom_point(data = data.frame(x = nest[1], y = nest[2]-100),
aes(x, y), color = 'red')
))
print(
suppressMessages(
draw_FoodPatches(det[[1]],
add = draw_hexagons(det[[1]], add = ggplot(data = sgm[idx_1 | idx_2 | idx_3, ], aes(x, y))+geom_point())+
geom_circle(centers, 150, color = 'blue') +
geom_point(data = data.frame(x = nest[1], y = nest[2]-100),
aes(x, y), color = 'red'))
))
print(
suppressMessages(
draw_FoodPatches(det[[1]],
add = draw_hexagons(det[[1]], add = ggplot(data = sgm[idx_1 | idx_2 | idx_3, ], aes(x, y))+geom_point())+
geom_circle(centers, 150, color = 'blue') +
geom_point(data = data.frame(x = nest[1], y = nest[2]-100),
aes(x, y), color = 'red'),
fill = 'grey80')
))
print(
suppressMessages(
ddraw_FoodPatches(det[[1]], add = ggplot(data = sgm[idx_1 | idx_2 | idx_3, ], aes(x, y))+geom_point())+
geom_circle(centers, 150, color = 'blue') +
geom_point(data = data.frame(x = nest[1], y = nest[2]-100),
aes(x, y), color = 'red')
))
print(
suppressMessages(
draw_FoodPatches(det[[1]], add = ggplot(data = sgm[idx_1 | idx_2 | idx_3, ], aes(x, y))+geom_point())+
geom_circle(centers, 150, color = 'blue') +
geom_point(data = data.frame(x = nest[1], y = nest[2]-100),
aes(x, y), color = 'red')
))
print(
suppressMessages(
draw_FoodPatches(det[[1]], add = draw_hexagons(det[[1]]))+
geom_point(data = sgm[idx_1 | idx_2 | idx_3, ], aes(x, y))+
geom_circle(centers, 150, color = 'blue') +
geom_point(data = data.frame(x = nest[1], y = nest[2]-100),
aes(x, y), color = 'red')
))
print(
suppressMessages(
draw_FoodPatches(det[[1]], add = draw_hexagons(det[[1]]), fill = 'grey80')+
geom_point(data = sgm[idx_1 | idx_2 | idx_3, ], aes(x, y))+
geom_circle(centers, 150, color = 'blue') +
geom_point(data = data.frame(x = nest[1], y = nest[2]-100),
aes(x, y), color = 'red')
))
print(
suppressMessages(
draw_FoodPatches(det[[1]], add = draw_hexagons(det[[1]]), fill = 'grey50')+
geom_point(data = sgm[idx_1 | idx_2 | idx_3, ], aes(x, y))+
geom_circle(centers, 150, color = 'blue') +
geom_point(data = data.frame(x = nest[1], y = nest[2]-100),
aes(x, y), color = 'red')
))
print(
suppressMessages(
draw_FoodPatches(det[[1]], add = draw_hexagons(det[[1]]), fill = 'grey50')+
geom_point(data = sgm[idx_1 | idx_2 | idx_3, ], aes(x, y))+
geom_circle(centers, 150, color = 'blue') +
geom_point(data = data.frame(x = nest[1], y = nest[2]-100),
aes(x, y), color = 'red', size = 3)
))
draw_FoodPatches(det[[1]], add = draw_hexagons(det[[1]]), fill = 'grey50')+
geom_point(data = sgm[idx_1 | idx_2 | idx_3, ], aes(x, y))+
geom_circle(centers, 150, color = 'blue') +
geom_point(data = data.frame(x = nest[1], y = nest[2]-100),
aes(x, y), color = 'red', size = 3) + ggtitle('Radi = 150', "Es representen els nodes que abarca el cercle (punts negres), l'hexàgon que conforma el patch de menjar (pintats en gris), els cercles (en blau) i el niu (punt vermell)")
